"""All input for the `authenticate` mutation."""
input AuthenticateInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  email: String!
  password: String!
}

"""The output of our `authenticate` mutation."""
type AuthenticatePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  jwtToken: JwtToken

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the create `Guide` mutation."""
input CreateGuideInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Guide` to be created by this mutation."""
  guide: GuideInput!
}

"""The output of our create `Guide` mutation."""
type CreateGuidePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Guide` that was created by this mutation."""
  guide: Guide

  """An edge for our `Guide`. May be used by Relay 1."""
  guideEdge(
    """The method to use when ordering `Guide`."""
    orderBy: [GuidesOrderBy!] = [PRIMARY_KEY_ASC]
  ): GuidesEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `User` that is related to this `Guide`."""
  userByOwner: User
}

"""All input for the create `Ride` mutation."""
input CreateRideInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Ride` to be created by this mutation."""
  ride: RideInput!
}

"""The output of our create `Ride` mutation."""
type CreateRidePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """Reads a single `Guide` that is related to this `Ride`."""
  guideByGuide: Guide

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """The `Ride` that was created by this mutation."""
  ride: Ride

  """An edge for our `Ride`. May be used by Relay 1."""
  rideEdge(
    """The method to use when ordering `Ride`."""
    orderBy: [RidesOrderBy!] = [PRIMARY_KEY_ASC]
  ): RidesEdge

  """Reads a single `Spot` that is related to this `Ride`."""
  spotByFromSpot: Spot

  """Reads a single `Spot` that is related to this `Ride`."""
  spotByToSpot: Spot

  """Reads a single `Stage` that is related to this `Ride`."""
  stageByStage: Stage

  """Reads a single `User` that is related to this `Ride`."""
  userByOwner: User
}

"""All input for the create `Spot` mutation."""
input CreateSpotInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Spot` to be created by this mutation."""
  spot: SpotInput!
}

"""The output of our create `Spot` mutation."""
type CreateSpotPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """Reads a single `Guide` that is related to this `Spot`."""
  guideByGuide: Guide

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """The `Spot` that was created by this mutation."""
  spot: Spot

  """An edge for our `Spot`. May be used by Relay 1."""
  spotEdge(
    """The method to use when ordering `Spot`."""
    orderBy: [SpotsOrderBy!] = [PRIMARY_KEY_ASC]
  ): SpotsEdge

  """Reads a single `Stage` that is related to this `Spot`."""
  stageByStage: Stage

  """Reads a single `User` that is related to this `Spot`."""
  userByOwner: User
}

"""All input for the create `Stage` mutation."""
input CreateStageInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Stage` to be created by this mutation."""
  stage: StageInput!
}

"""The output of our create `Stage` mutation."""
type CreateStagePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """Reads a single `Guide` that is related to this `Stage`."""
  guideByGuide: Guide

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Spot` that is related to this `Stage`."""
  spotByFromSpot: Spot

  """Reads a single `Spot` that is related to this `Stage`."""
  spotByToSpot: Spot

  """The `Stage` that was created by this mutation."""
  stage: Stage

  """An edge for our `Stage`. May be used by Relay 1."""
  stageEdge(
    """The method to use when ordering `Stage`."""
    orderBy: [StagesOrderBy!] = [PRIMARY_KEY_ASC]
  ): StagesEdge
}

"""All input for the create `User` mutation."""
input CreateUserInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `User` to be created by this mutation."""
  user: UserInput!
}

"""The output of our create `User` mutation."""
type CreateUserPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """The `User` that was created by this mutation."""
  user: User

  """An edge for our `User`. May be used by Relay 1."""
  userEdge(
    """The method to use when ordering `User`."""
    orderBy: [UsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): UsersEdge
}

"""A location in a connection that can be used for resuming pagination."""
scalar Cursor

"""The day, does not include a time."""
scalar Date

"""All input for the `deleteGuideByNodeId` mutation."""
input DeleteGuideByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Guide` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteGuide` mutation."""
input DeleteGuideInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: String!
}

"""The output of our delete `Guide` mutation."""
type DeleteGuidePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  deletedGuideNodeId: ID

  """The `Guide` that was deleted by this mutation."""
  guide: Guide

  """An edge for our `Guide`. May be used by Relay 1."""
  guideEdge(
    """The method to use when ordering `Guide`."""
    orderBy: [GuidesOrderBy!] = [PRIMARY_KEY_ASC]
  ): GuidesEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `User` that is related to this `Guide`."""
  userByOwner: User
}

"""All input for the `deleteRideByNodeId` mutation."""
input DeleteRideByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Ride` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteRide` mutation."""
input DeleteRideInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: String!
}

"""The output of our delete `Ride` mutation."""
type DeleteRidePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  deletedRideNodeId: ID

  """Reads a single `Guide` that is related to this `Ride`."""
  guideByGuide: Guide

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """The `Ride` that was deleted by this mutation."""
  ride: Ride

  """An edge for our `Ride`. May be used by Relay 1."""
  rideEdge(
    """The method to use when ordering `Ride`."""
    orderBy: [RidesOrderBy!] = [PRIMARY_KEY_ASC]
  ): RidesEdge

  """Reads a single `Spot` that is related to this `Ride`."""
  spotByFromSpot: Spot

  """Reads a single `Spot` that is related to this `Ride`."""
  spotByToSpot: Spot

  """Reads a single `Stage` that is related to this `Ride`."""
  stageByStage: Stage

  """Reads a single `User` that is related to this `Ride`."""
  userByOwner: User
}

"""All input for the `deleteSpotByNodeId` mutation."""
input DeleteSpotByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Spot` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteSpot` mutation."""
input DeleteSpotInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: String!
}

"""The output of our delete `Spot` mutation."""
type DeleteSpotPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  deletedSpotNodeId: ID

  """Reads a single `Guide` that is related to this `Spot`."""
  guideByGuide: Guide

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """The `Spot` that was deleted by this mutation."""
  spot: Spot

  """An edge for our `Spot`. May be used by Relay 1."""
  spotEdge(
    """The method to use when ordering `Spot`."""
    orderBy: [SpotsOrderBy!] = [PRIMARY_KEY_ASC]
  ): SpotsEdge

  """Reads a single `Stage` that is related to this `Spot`."""
  stageByStage: Stage

  """Reads a single `User` that is related to this `Spot`."""
  userByOwner: User
}

"""All input for the `deleteStageByNodeId` mutation."""
input DeleteStageByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Stage` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteStage` mutation."""
input DeleteStageInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: String!
}

"""The output of our delete `Stage` mutation."""
type DeleteStagePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  deletedStageNodeId: ID

  """Reads a single `Guide` that is related to this `Stage`."""
  guideByGuide: Guide

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Spot` that is related to this `Stage`."""
  spotByFromSpot: Spot

  """Reads a single `Spot` that is related to this `Stage`."""
  spotByToSpot: Spot

  """The `Stage` that was deleted by this mutation."""
  stage: Stage

  """An edge for our `Stage`. May be used by Relay 1."""
  stageEdge(
    """The method to use when ordering `Stage`."""
    orderBy: [StagesOrderBy!] = [PRIMARY_KEY_ASC]
  ): StagesEdge
}

"""All input for the `deleteUserByNodeId` mutation."""
input DeleteUserByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `User` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteUser` mutation."""
input DeleteUserInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  username: String!
}

"""The output of our delete `User` mutation."""
type DeleteUserPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  deletedUserNodeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """The `User` that was deleted by this mutation."""
  user: User

  """An edge for our `User`. May be used by Relay 1."""
  userEdge(
    """The method to use when ordering `User`."""
    orderBy: [UsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): UsersEdge
}

type Guide implements Node {
  id: String!
  maxHoursPerRide: Int!

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  owner: String!

  """Reads and enables pagination through a set of `Ride`."""
  ridesByGuide(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: RideCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Ride`."""
    orderBy: [RidesOrderBy!] = [PRIMARY_KEY_ASC]
  ): RidesConnection!
  slug: String!

  """Reads and enables pagination through a set of `Spot`."""
  spotsByGuide(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: SpotCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Spot`."""
    orderBy: [SpotsOrderBy!] = [PRIMARY_KEY_ASC]
  ): SpotsConnection!

  """Reads and enables pagination through a set of `Stage`."""
  stagesByGuide(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: StageCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Stage`."""
    orderBy: [StagesOrderBy!] = [PRIMARY_KEY_ASC]
  ): StagesConnection!
  startDate: Date
  title: String!

  """Reads a single `User` that is related to this `Guide`."""
  userByOwner: User
}

"""
A condition to be used against `Guide` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input GuideCondition {
  """Checks for equality with the object’s `id` field."""
  id: String

  """Checks for equality with the object’s `maxHoursPerRide` field."""
  maxHoursPerRide: Int

  """Checks for equality with the object’s `owner` field."""
  owner: String

  """Checks for equality with the object’s `slug` field."""
  slug: String

  """Checks for equality with the object’s `startDate` field."""
  startDate: Date

  """Checks for equality with the object’s `title` field."""
  title: String
}

"""An input for mutations affecting `Guide`"""
input GuideInput {
  id: String!
  maxHoursPerRide: Int
  owner: String!
  slug: String!
  startDate: Date
  title: String!
}

"""
Represents an update to a `Guide`. Fields that are set will be updated.
"""
input GuidePatch {
  id: String
  maxHoursPerRide: Int
  owner: String
  slug: String
  startDate: Date
  title: String
}

"""A connection to a list of `Guide` values."""
type GuidesConnection {
  """
  A list of edges which contains the `Guide` and cursor to aid in pagination.
  """
  edges: [GuidesEdge!]!

  """A list of `Guide` objects."""
  nodes: [Guide]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Guide` you could get from the connection."""
  totalCount: Int!
}

"""A `Guide` edge in the connection."""
type GuidesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Guide` at the end of the edge."""
  node: Guide
}

"""Methods to use when ordering `Guide`."""
enum GuidesOrderBy {
  ID_ASC
  ID_DESC
  MAX_HOURS_PER_RIDE_ASC
  MAX_HOURS_PER_RIDE_DESC
  NATURAL
  OWNER_ASC
  OWNER_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  SLUG_ASC
  SLUG_DESC
  START_DATE_ASC
  START_DATE_DESC
  TITLE_ASC
  TITLE_DESC
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON

"""
A JSON Web Token defined by [RFC 7519](https://tools.ietf.org/html/rfc7519)
which securely represents claims between two parties.
"""
scalar JwtToken

"""
The root mutation type which contains root level fields which mutate data.
"""
type Mutation {
  addSpotFromLatLng(guideId: String!, label: String, lat: Float!, long: Float!): Spot!

  """
  Creates a JWT token that will securely identify a person and give them certain permissions. This token expires in 2 days.
  """
  authenticate(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: AuthenticateInput!
  ): AuthenticatePayload
  computeRides(guideId: String!): String!

  """Creates a single `Guide`."""
  createGuide(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateGuideInput!
  ): CreateGuidePayload

  """Creates a single `Ride`."""
  createRide(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateRideInput!
  ): CreateRidePayload

  """Creates a single `Spot`."""
  createSpot(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateSpotInput!
  ): CreateSpotPayload

  """Creates a single `Stage`."""
  createStage(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateStageInput!
  ): CreateStagePayload

  """Creates a single `User`."""
  createUser(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateUserInput!
  ): CreateUserPayload

  """Deletes a single `Guide` using a unique key."""
  deleteGuide(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteGuideInput!
  ): DeleteGuidePayload

  """Deletes a single `Guide` using its globally unique id."""
  deleteGuideByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteGuideByNodeIdInput!
  ): DeleteGuidePayload

  """Deletes a single `Ride` using a unique key."""
  deleteRide(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteRideInput!
  ): DeleteRidePayload

  """Deletes a single `Ride` using its globally unique id."""
  deleteRideByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteRideByNodeIdInput!
  ): DeleteRidePayload

  """Deletes a single `Spot` using a unique key."""
  deleteSpot(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteSpotInput!
  ): DeleteSpotPayload

  """Deletes a single `Spot` using its globally unique id."""
  deleteSpotByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteSpotByNodeIdInput!
  ): DeleteSpotPayload

  """Deletes a single `Stage` using a unique key."""
  deleteStage(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteStageInput!
  ): DeleteStagePayload

  """Deletes a single `Stage` using its globally unique id."""
  deleteStageByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteStageByNodeIdInput!
  ): DeleteStagePayload

  """Deletes a single `User` using a unique key."""
  deleteUser(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteUserInput!
  ): DeleteUserPayload

  """Deletes a single `User` using its globally unique id."""
  deleteUserByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteUserByNodeIdInput!
  ): DeleteUserPayload
  moveSpot(lat: Float!, long: Float!, spotId: String!): Spot!

  """Registers a single user"""
  register(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: RegisterInput!
  ): RegisterPayload
  removeSpot(spotId: String!): Spot!

  """Updates a single `Guide` using a unique key and a patch."""
  updateGuide(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateGuideInput!
  ): UpdateGuidePayload

  """Updates a single `Guide` using its globally unique id and a patch."""
  updateGuideByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateGuideByNodeIdInput!
  ): UpdateGuidePayload

  """Updates a single `Ride` using a unique key and a patch."""
  updateRide(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateRideInput!
  ): UpdateRidePayload

  """Updates a single `Ride` using its globally unique id and a patch."""
  updateRideByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateRideByNodeIdInput!
  ): UpdateRidePayload

  """Updates a single `Spot` using a unique key and a patch."""
  updateSpot(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateSpotInput!
  ): UpdateSpotPayload

  """Updates a single `Spot` using its globally unique id and a patch."""
  updateSpotByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateSpotByNodeIdInput!
  ): UpdateSpotPayload

  """Updates a single `Stage` using a unique key and a patch."""
  updateStage(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateStageInput!
  ): UpdateStagePayload

  """Updates a single `Stage` using its globally unique id and a patch."""
  updateStageByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateStageByNodeIdInput!
  ): UpdateStagePayload

  """Updates a single `User` using a unique key and a patch."""
  updateUser(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateUserInput!
  ): UpdateUserPayload

  """Updates a single `User` using its globally unique id and a patch."""
  updateUserByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateUserByNodeIdInput!
  ): UpdateUserPayload
}

"""An object with a globally unique `ID`."""
interface Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, the cursor to continue."""
  endCursor: Cursor

  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: Cursor
}

"""The root query type which gives access points into the data universe."""
type Query implements Node {
  getCurrentUser: JwtToken
  guide(id: String!): Guide

  """Reads a single `Guide` using its globally unique `ID`."""
  guideByNodeId(
    """The globally unique `ID` to be used in selecting a single `Guide`."""
    nodeId: ID!
  ): Guide

  """Reads and enables pagination through a set of `Guide`."""
  guides(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: GuideCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Guide`."""
    orderBy: [GuidesOrderBy!] = [PRIMARY_KEY_ASC]
  ): GuidesConnection

  """Fetches an object given its globally unique `ID`."""
  node(
    """The globally unique `ID`."""
    nodeId: ID!
  ): Node

  """
  The root query type must be a `Node` to work well with Relay 1 mutations. This just resolves to `query`.
  """
  nodeId: ID!

  """
  Exposes the root query type nested one level down. This is helpful for Relay 1
  which can only query top level fields if they are in a particular form.
  """
  query: Query!
  ride(id: String!): Ride

  """Reads a single `Ride` using its globally unique `ID`."""
  rideByNodeId(
    """The globally unique `ID` to be used in selecting a single `Ride`."""
    nodeId: ID!
  ): Ride

  """Reads and enables pagination through a set of `Ride`."""
  rides(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: RideCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Ride`."""
    orderBy: [RidesOrderBy!] = [PRIMARY_KEY_ASC]
  ): RidesConnection
  spot(id: String!): Spot

  """Reads a single `Spot` using its globally unique `ID`."""
  spotByNodeId(
    """The globally unique `ID` to be used in selecting a single `Spot`."""
    nodeId: ID!
  ): Spot

  """Reads and enables pagination through a set of `Spot`."""
  spots(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: SpotCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Spot`."""
    orderBy: [SpotsOrderBy!] = [PRIMARY_KEY_ASC]
  ): SpotsConnection
  stage(id: String!): Stage

  """Reads a single `Stage` using its globally unique `ID`."""
  stageByNodeId(
    """The globally unique `ID` to be used in selecting a single `Stage`."""
    nodeId: ID!
  ): Stage

  """Reads and enables pagination through a set of `Stage`."""
  stages(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: StageCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Stage`."""
    orderBy: [StagesOrderBy!] = [PRIMARY_KEY_ASC]
  ): StagesConnection
  user(username: String!): User

  """Reads a single `User` using its globally unique `ID`."""
  userByNodeId(
    """The globally unique `ID` to be used in selecting a single `User`."""
    nodeId: ID!
  ): User

  """Reads and enables pagination through a set of `User`."""
  users(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: UserCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `User`."""
    orderBy: [UsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): UsersConnection
}

"""All input for the `register` mutation."""
input RegisterInput {
  _email: String!
  _password: String!
  _username: String!

  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
}

"""The output of our `register` mutation."""
type RegisterPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
  user: User

  """An edge for our `User`. May be used by Relay 1."""
  userEdge(
    """The method to use when ordering `User`."""
    orderBy: [UsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): UsersEdge
}

type Ride implements Node {
  date: Date
  distanceMeters: Int
  durationSeconds: Int
  fromSpot: String!
  guide: String!

  """Reads a single `Guide` that is related to this `Ride`."""
  guideByGuide: Guide
  id: String!

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  owner: String!
  path: JSON

  """Reads a single `Spot` that is related to this `Ride`."""
  spotByFromSpot: Spot

  """Reads a single `Spot` that is related to this `Ride`."""
  spotByToSpot: Spot
  stage: String!

  """Reads a single `Stage` that is related to this `Ride`."""
  stageByStage: Stage
  toSpot: String!

  """Reads a single `User` that is related to this `Ride`."""
  userByOwner: User
}

"""
A condition to be used against `Ride` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input RideCondition {
  """Checks for equality with the object’s `date` field."""
  date: Date

  """Checks for equality with the object’s `distanceMeters` field."""
  distanceMeters: Int

  """Checks for equality with the object’s `durationSeconds` field."""
  durationSeconds: Int

  """Checks for equality with the object’s `fromSpot` field."""
  fromSpot: String

  """Checks for equality with the object’s `guide` field."""
  guide: String

  """Checks for equality with the object’s `id` field."""
  id: String

  """Checks for equality with the object’s `owner` field."""
  owner: String

  """Checks for equality with the object’s `path` field."""
  path: JSON

  """Checks for equality with the object’s `stage` field."""
  stage: String

  """Checks for equality with the object’s `toSpot` field."""
  toSpot: String
}

"""An input for mutations affecting `Ride`"""
input RideInput {
  date: Date
  distanceMeters: Int
  durationSeconds: Int
  fromSpot: String!
  guide: String!
  id: String!
  owner: String!
  path: JSON
  stage: String!
  toSpot: String!
}

"""Represents an update to a `Ride`. Fields that are set will be updated."""
input RidePatch {
  date: Date
  distanceMeters: Int
  durationSeconds: Int
  fromSpot: String
  guide: String
  id: String
  owner: String
  path: JSON
  stage: String
  toSpot: String
}

"""A connection to a list of `Ride` values."""
type RidesConnection {
  """
  A list of edges which contains the `Ride` and cursor to aid in pagination.
  """
  edges: [RidesEdge!]!

  """A list of `Ride` objects."""
  nodes: [Ride]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Ride` you could get from the connection."""
  totalCount: Int!
}

"""A `Ride` edge in the connection."""
type RidesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Ride` at the end of the edge."""
  node: Ride
}

"""Methods to use when ordering `Ride`."""
enum RidesOrderBy {
  DATE_ASC
  DATE_DESC
  DISTANCE_METERS_ASC
  DISTANCE_METERS_DESC
  DURATION_SECONDS_ASC
  DURATION_SECONDS_DESC
  FROM_SPOT_ASC
  FROM_SPOT_DESC
  GUIDE_ASC
  GUIDE_DESC
  ID_ASC
  ID_DESC
  NATURAL
  OWNER_ASC
  OWNER_DESC
  PATH_ASC
  PATH_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  STAGE_ASC
  STAGE_DESC
  TO_SPOT_ASC
  TO_SPOT_DESC
}

type Spot implements Node {
  country: String
  date: Date
  guide: String!

  """Reads a single `Guide` that is related to this `Spot`."""
  guideByGuide: Guide
  id: String!
  label: String
  lat: Float!
  location: String
  locked: Boolean!
  long: Float!
  nights: Int

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  owner: String!
  position: String

  """Reads and enables pagination through a set of `Ride`."""
  ridesByFromSpot(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: RideCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Ride`."""
    orderBy: [RidesOrderBy!] = [PRIMARY_KEY_ASC]
  ): RidesConnection!

  """Reads and enables pagination through a set of `Ride`."""
  ridesByToSpot(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: RideCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Ride`."""
    orderBy: [RidesOrderBy!] = [PRIMARY_KEY_ASC]
  ): RidesConnection!
  stage: String

  """Reads a single `Stage` that is related to this `Spot`."""
  stageByStage: Stage

  """Reads and enables pagination through a set of `Stage`."""
  stagesByFromSpot(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: StageCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Stage`."""
    orderBy: [StagesOrderBy!] = [PRIMARY_KEY_ASC]
  ): StagesConnection!

  """Reads and enables pagination through a set of `Stage`."""
  stagesByToSpot(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: StageCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Stage`."""
    orderBy: [StagesOrderBy!] = [PRIMARY_KEY_ASC]
  ): StagesConnection!

  """Reads a single `User` that is related to this `Spot`."""
  userByOwner: User
}

"""
A condition to be used against `Spot` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input SpotCondition {
  """Checks for equality with the object’s `country` field."""
  country: String

  """Checks for equality with the object’s `date` field."""
  date: Date

  """Checks for equality with the object’s `guide` field."""
  guide: String

  """Checks for equality with the object’s `id` field."""
  id: String

  """Checks for equality with the object’s `label` field."""
  label: String

  """Checks for equality with the object’s `lat` field."""
  lat: Float

  """Checks for equality with the object’s `location` field."""
  location: String

  """Checks for equality with the object’s `locked` field."""
  locked: Boolean

  """Checks for equality with the object’s `long` field."""
  long: Float

  """Checks for equality with the object’s `nights` field."""
  nights: Int

  """Checks for equality with the object’s `owner` field."""
  owner: String

  """Checks for equality with the object’s `position` field."""
  position: String

  """Checks for equality with the object’s `stage` field."""
  stage: String
}

"""An input for mutations affecting `Spot`"""
input SpotInput {
  country: String
  date: Date
  guide: String!
  id: String!
  label: String
  lat: Float!
  location: String
  locked: Boolean!
  long: Float!
  nights: Int
  owner: String!
  position: String
  stage: String
}

"""Represents an update to a `Spot`. Fields that are set will be updated."""
input SpotPatch {
  country: String
  date: Date
  guide: String
  id: String
  label: String
  lat: Float
  location: String
  locked: Boolean
  long: Float
  nights: Int
  owner: String
  position: String
  stage: String
}

"""A connection to a list of `Spot` values."""
type SpotsConnection {
  """
  A list of edges which contains the `Spot` and cursor to aid in pagination.
  """
  edges: [SpotsEdge!]!

  """A list of `Spot` objects."""
  nodes: [Spot]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Spot` you could get from the connection."""
  totalCount: Int!
}

"""A `Spot` edge in the connection."""
type SpotsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Spot` at the end of the edge."""
  node: Spot
}

"""Methods to use when ordering `Spot`."""
enum SpotsOrderBy {
  COUNTRY_ASC
  COUNTRY_DESC
  DATE_ASC
  DATE_DESC
  GUIDE_ASC
  GUIDE_DESC
  ID_ASC
  ID_DESC
  LABEL_ASC
  LABEL_DESC
  LAT_ASC
  LAT_DESC
  LOCATION_ASC
  LOCATION_DESC
  LOCKED_ASC
  LOCKED_DESC
  LONG_ASC
  LONG_DESC
  NATURAL
  NIGHTS_ASC
  NIGHTS_DESC
  OWNER_ASC
  OWNER_DESC
  POSITION_ASC
  POSITION_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  STAGE_ASC
  STAGE_DESC
}

type Stage implements Node {
  created: Date
  fromSpot: String!
  guide: String!

  """Reads a single `Guide` that is related to this `Stage`."""
  guideByGuide: Guide
  id: String!

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!

  """Reads and enables pagination through a set of `Ride`."""
  ridesByStage(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: RideCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Ride`."""
    orderBy: [RidesOrderBy!] = [PRIMARY_KEY_ASC]
  ): RidesConnection!

  """Reads a single `Spot` that is related to this `Stage`."""
  spotByFromSpot: Spot

  """Reads a single `Spot` that is related to this `Stage`."""
  spotByToSpot: Spot

  """Reads and enables pagination through a set of `Spot`."""
  spotsByStage(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: SpotCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Spot`."""
    orderBy: [SpotsOrderBy!] = [PRIMARY_KEY_ASC]
  ): SpotsConnection!
  toSpot: String!
  updated: Date
}

"""
A condition to be used against `Stage` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input StageCondition {
  """Checks for equality with the object’s `created` field."""
  created: Date

  """Checks for equality with the object’s `fromSpot` field."""
  fromSpot: String

  """Checks for equality with the object’s `guide` field."""
  guide: String

  """Checks for equality with the object’s `id` field."""
  id: String

  """Checks for equality with the object’s `toSpot` field."""
  toSpot: String

  """Checks for equality with the object’s `updated` field."""
  updated: Date
}

"""An input for mutations affecting `Stage`"""
input StageInput {
  created: Date
  fromSpot: String!
  guide: String!
  id: String!
  toSpot: String!
  updated: Date
}

"""
Represents an update to a `Stage`. Fields that are set will be updated.
"""
input StagePatch {
  created: Date
  fromSpot: String
  guide: String
  id: String
  toSpot: String
  updated: Date
}

"""A connection to a list of `Stage` values."""
type StagesConnection {
  """
  A list of edges which contains the `Stage` and cursor to aid in pagination.
  """
  edges: [StagesEdge!]!

  """A list of `Stage` objects."""
  nodes: [Stage]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Stage` you could get from the connection."""
  totalCount: Int!
}

"""A `Stage` edge in the connection."""
type StagesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Stage` at the end of the edge."""
  node: Stage
}

"""Methods to use when ordering `Stage`."""
enum StagesOrderBy {
  CREATED_ASC
  CREATED_DESC
  FROM_SPOT_ASC
  FROM_SPOT_DESC
  GUIDE_ASC
  GUIDE_DESC
  ID_ASC
  ID_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  TO_SPOT_ASC
  TO_SPOT_DESC
  UPDATED_ASC
  UPDATED_DESC
}

"""All input for the `updateGuideByNodeId` mutation."""
input UpdateGuideByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Guide` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `Guide` being updated.
  """
  patch: GuidePatch!
}

"""All input for the `updateGuide` mutation."""
input UpdateGuideInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: String!

  """
  An object where the defined keys will be set on the `Guide` being updated.
  """
  patch: GuidePatch!
}

"""The output of our update `Guide` mutation."""
type UpdateGuidePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Guide` that was updated by this mutation."""
  guide: Guide

  """An edge for our `Guide`. May be used by Relay 1."""
  guideEdge(
    """The method to use when ordering `Guide`."""
    orderBy: [GuidesOrderBy!] = [PRIMARY_KEY_ASC]
  ): GuidesEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `User` that is related to this `Guide`."""
  userByOwner: User
}

"""All input for the `updateRideByNodeId` mutation."""
input UpdateRideByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Ride` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `Ride` being updated.
  """
  patch: RidePatch!
}

"""All input for the `updateRide` mutation."""
input UpdateRideInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: String!

  """
  An object where the defined keys will be set on the `Ride` being updated.
  """
  patch: RidePatch!
}

"""The output of our update `Ride` mutation."""
type UpdateRidePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """Reads a single `Guide` that is related to this `Ride`."""
  guideByGuide: Guide

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """The `Ride` that was updated by this mutation."""
  ride: Ride

  """An edge for our `Ride`. May be used by Relay 1."""
  rideEdge(
    """The method to use when ordering `Ride`."""
    orderBy: [RidesOrderBy!] = [PRIMARY_KEY_ASC]
  ): RidesEdge

  """Reads a single `Spot` that is related to this `Ride`."""
  spotByFromSpot: Spot

  """Reads a single `Spot` that is related to this `Ride`."""
  spotByToSpot: Spot

  """Reads a single `Stage` that is related to this `Ride`."""
  stageByStage: Stage

  """Reads a single `User` that is related to this `Ride`."""
  userByOwner: User
}

"""All input for the `updateSpotByNodeId` mutation."""
input UpdateSpotByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Spot` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `Spot` being updated.
  """
  patch: SpotPatch!
}

"""All input for the `updateSpot` mutation."""
input UpdateSpotInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: String!

  """
  An object where the defined keys will be set on the `Spot` being updated.
  """
  patch: SpotPatch!
}

"""The output of our update `Spot` mutation."""
type UpdateSpotPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """Reads a single `Guide` that is related to this `Spot`."""
  guideByGuide: Guide

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """The `Spot` that was updated by this mutation."""
  spot: Spot

  """An edge for our `Spot`. May be used by Relay 1."""
  spotEdge(
    """The method to use when ordering `Spot`."""
    orderBy: [SpotsOrderBy!] = [PRIMARY_KEY_ASC]
  ): SpotsEdge

  """Reads a single `Stage` that is related to this `Spot`."""
  stageByStage: Stage

  """Reads a single `User` that is related to this `Spot`."""
  userByOwner: User
}

"""All input for the `updateStageByNodeId` mutation."""
input UpdateStageByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Stage` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `Stage` being updated.
  """
  patch: StagePatch!
}

"""All input for the `updateStage` mutation."""
input UpdateStageInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: String!

  """
  An object where the defined keys will be set on the `Stage` being updated.
  """
  patch: StagePatch!
}

"""The output of our update `Stage` mutation."""
type UpdateStagePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """Reads a single `Guide` that is related to this `Stage`."""
  guideByGuide: Guide

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Spot` that is related to this `Stage`."""
  spotByFromSpot: Spot

  """Reads a single `Spot` that is related to this `Stage`."""
  spotByToSpot: Spot

  """The `Stage` that was updated by this mutation."""
  stage: Stage

  """An edge for our `Stage`. May be used by Relay 1."""
  stageEdge(
    """The method to use when ordering `Stage`."""
    orderBy: [StagesOrderBy!] = [PRIMARY_KEY_ASC]
  ): StagesEdge
}

"""All input for the `updateUserByNodeId` mutation."""
input UpdateUserByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `User` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `User` being updated.
  """
  patch: UserPatch!
}

"""All input for the `updateUser` mutation."""
input UpdateUserInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `User` being updated.
  """
  patch: UserPatch!
  username: String!
}

"""The output of our update `User` mutation."""
type UpdateUserPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """The `User` that was updated by this mutation."""
  user: User

  """An edge for our `User`. May be used by Relay 1."""
  userEdge(
    """The method to use when ordering `User`."""
    orderBy: [UsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): UsersEdge
}

type User implements Node {
  created: Date
  email: String!

  """Reads and enables pagination through a set of `Guide`."""
  guidesByOwner(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: GuideCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Guide`."""
    orderBy: [GuidesOrderBy!] = [PRIMARY_KEY_ASC]
  ): GuidesConnection!

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  passwordHash: String!

  """Reads and enables pagination through a set of `Ride`."""
  ridesByOwner(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: RideCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Ride`."""
    orderBy: [RidesOrderBy!] = [PRIMARY_KEY_ASC]
  ): RidesConnection!

  """Reads and enables pagination through a set of `Spot`."""
  spotsByOwner(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: SpotCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Spot`."""
    orderBy: [SpotsOrderBy!] = [PRIMARY_KEY_ASC]
  ): SpotsConnection!
  updated: Date
  username: String!
}

"""
A condition to be used against `User` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input UserCondition {
  """Checks for equality with the object’s `created` field."""
  created: Date

  """Checks for equality with the object’s `email` field."""
  email: String

  """Checks for equality with the object’s `passwordHash` field."""
  passwordHash: String

  """Checks for equality with the object’s `updated` field."""
  updated: Date

  """Checks for equality with the object’s `username` field."""
  username: String
}

"""An input for mutations affecting `User`"""
input UserInput {
  created: Date
  email: String!
  passwordHash: String!
  updated: Date
  username: String!
}

"""Represents an update to a `User`. Fields that are set will be updated."""
input UserPatch {
  created: Date
  email: String
  passwordHash: String
  updated: Date
  username: String
}

"""A connection to a list of `User` values."""
type UsersConnection {
  """
  A list of edges which contains the `User` and cursor to aid in pagination.
  """
  edges: [UsersEdge!]!

  """A list of `User` objects."""
  nodes: [User]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `User` you could get from the connection."""
  totalCount: Int!
}

"""A `User` edge in the connection."""
type UsersEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `User` at the end of the edge."""
  node: User
}

"""Methods to use when ordering `User`."""
enum UsersOrderBy {
  CREATED_ASC
  CREATED_DESC
  EMAIL_ASC
  EMAIL_DESC
  NATURAL
  PASSWORD_HASH_ASC
  PASSWORD_HASH_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  UPDATED_ASC
  UPDATED_DESC
  USERNAME_ASC
  USERNAME_DESC
}
