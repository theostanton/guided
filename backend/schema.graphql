"""
A signed eight-byte integer. The upper big integer values are greater than the
max value for a JavaScript number. Therefore all big integers will be output as
strings and not numbers.
"""
scalar BigInt

"""
A filter to be used against BigInt fields. All fields are combined with a logical ‘and.’
"""
input BigIntFilter {
  """
  Is null (if `true` is specified) or is not null (if `false` is specified).
  """
  isNull: Boolean

  """Equal to the specified value."""
  equalTo: BigInt

  """Not equal to the specified value."""
  notEqualTo: BigInt

  """
  Not equal to the specified value, treating null like an ordinary value.
  """
  distinctFrom: BigInt

  """Equal to the specified value, treating null like an ordinary value."""
  notDistinctFrom: BigInt

  """Included in the specified list."""
  in: [BigInt!]

  """Not included in the specified list."""
  notIn: [BigInt!]

  """Less than the specified value."""
  lessThan: BigInt

  """Less than or equal to the specified value."""
  lessThanOrEqualTo: BigInt

  """Greater than the specified value."""
  greaterThan: BigInt

  """Greater than or equal to the specified value."""
  greaterThanOrEqualTo: BigInt
}

"""
A filter to be used against Boolean fields. All fields are combined with a logical ‘and.’
"""
input BooleanFilter {
  """
  Is null (if `true` is specified) or is not null (if `false` is specified).
  """
  isNull: Boolean

  """Equal to the specified value."""
  equalTo: Boolean

  """Not equal to the specified value."""
  notEqualTo: Boolean

  """
  Not equal to the specified value, treating null like an ordinary value.
  """
  distinctFrom: Boolean

  """Equal to the specified value, treating null like an ordinary value."""
  notDistinctFrom: Boolean

  """Included in the specified list."""
  in: [Boolean!]

  """Not included in the specified list."""
  notIn: [Boolean!]

  """Less than the specified value."""
  lessThan: Boolean

  """Less than or equal to the specified value."""
  lessThanOrEqualTo: Boolean

  """Greater than the specified value."""
  greaterThan: Boolean

  """Greater than or equal to the specified value."""
  greaterThanOrEqualTo: Boolean
}

type Bound {
  north: Float
  east: Float
  south: Float
  west: Float
}

enum Colour {
  RED
  ORANGE
  YELLOW
  OLIVE
  GREEN
  TEAL
  BLUE
  VIOLET
  PURPLE
  PINK
  BROWN
  GREY
  BLACK
}

"""
A filter to be used against Colour fields. All fields are combined with a logical ‘and.’
"""
input ColourFilter {
  """
  Is null (if `true` is specified) or is not null (if `false` is specified).
  """
  isNull: Boolean

  """Equal to the specified value."""
  equalTo: Colour

  """Not equal to the specified value."""
  notEqualTo: Colour

  """
  Not equal to the specified value, treating null like an ordinary value.
  """
  distinctFrom: Colour

  """Equal to the specified value, treating null like an ordinary value."""
  notDistinctFrom: Colour

  """Included in the specified list."""
  in: [Colour!]

  """Not included in the specified list."""
  notIn: [Colour!]

  """Less than the specified value."""
  lessThan: Colour

  """Less than or equal to the specified value."""
  lessThanOrEqualTo: Colour

  """Greater than the specified value."""
  greaterThan: Colour

  """Greater than or equal to the specified value."""
  greaterThanOrEqualTo: Colour
}

type Computation implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: String!
  ended: Datetime
  duration: Int
  status: ComputationStatus!
  stage: String
  guide: String!
  created: Datetime!
  started: Datetime

  """Reads a single `Stage` that is related to this `Computation`."""
  stageByStage: Stage

  """Reads a single `Guide` that is related to this `Computation`."""
  guideByGuide: Guide
}

"""
A condition to be used against `Computation` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input ComputationCondition {
  """Checks for equality with the object’s `id` field."""
  id: String

  """Checks for equality with the object’s `ended` field."""
  ended: Datetime

  """Checks for equality with the object’s `duration` field."""
  duration: Int

  """Checks for equality with the object’s `status` field."""
  status: ComputationStatus

  """Checks for equality with the object’s `stage` field."""
  stage: String

  """Checks for equality with the object’s `guide` field."""
  guide: String

  """Checks for equality with the object’s `created` field."""
  created: Datetime

  """Checks for equality with the object’s `started` field."""
  started: Datetime
}

"""
A filter to be used against `Computation` object types. All fields are combined with a logical ‘and.’
"""
input ComputationFilter {
  """Filter by the object’s `id` field."""
  id: StringFilter

  """Filter by the object’s `ended` field."""
  ended: DatetimeFilter

  """Filter by the object’s `duration` field."""
  duration: IntFilter

  """Filter by the object’s `status` field."""
  status: ComputationStatusFilter

  """Filter by the object’s `stage` field."""
  stage: StringFilter

  """Filter by the object’s `guide` field."""
  guide: StringFilter

  """Filter by the object’s `created` field."""
  created: DatetimeFilter

  """Filter by the object’s `started` field."""
  started: DatetimeFilter

  """Checks for all expressions in this list."""
  and: [ComputationFilter!]

  """Checks for any expressions in this list."""
  or: [ComputationFilter!]

  """Negates the expression."""
  not: ComputationFilter
}

"""A connection to a list of `Computation` values."""
type ComputationsConnection {
  """A list of `Computation` objects."""
  nodes: [Computation]!

  """
  A list of edges which contains the `Computation` and cursor to aid in pagination.
  """
  edges: [ComputationsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Computation` you could get from the connection."""
  totalCount: Int!
}

"""A `Computation` edge in the connection."""
type ComputationsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Computation` at the end of the edge."""
  node: Computation
}

"""Methods to use when ordering `Computation`."""
enum ComputationsOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  ENDED_ASC
  ENDED_DESC
  DURATION_ASC
  DURATION_DESC
  STATUS_ASC
  STATUS_DESC
  STAGE_ASC
  STAGE_DESC
  GUIDE_ASC
  GUIDE_DESC
  CREATED_ASC
  CREATED_DESC
  STARTED_ASC
  STARTED_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

enum ComputationStatus {
  SCHEDULED
  FAILED
  COMPUTING
  SUCCESS
}

"""
A filter to be used against ComputationStatus fields. All fields are combined with a logical ‘and.’
"""
input ComputationStatusFilter {
  """
  Is null (if `true` is specified) or is not null (if `false` is specified).
  """
  isNull: Boolean

  """Equal to the specified value."""
  equalTo: ComputationStatus

  """Not equal to the specified value."""
  notEqualTo: ComputationStatus

  """
  Not equal to the specified value, treating null like an ordinary value.
  """
  distinctFrom: ComputationStatus

  """Equal to the specified value, treating null like an ordinary value."""
  notDistinctFrom: ComputationStatus

  """Included in the specified list."""
  in: [ComputationStatus!]

  """Not included in the specified list."""
  notIn: [ComputationStatus!]

  """Less than the specified value."""
  lessThan: ComputationStatus

  """Less than or equal to the specified value."""
  lessThanOrEqualTo: ComputationStatus

  """Greater than the specified value."""
  greaterThan: ComputationStatus

  """Greater than or equal to the specified value."""
  greaterThanOrEqualTo: ComputationStatus
}

"""A location in a connection that can be used for resuming pagination."""
scalar Cursor

"""
A point in time as described by the [ISO
8601](https://en.wikipedia.org/wiki/ISO_8601) standard. May or may not include a timezone.
"""
scalar Datetime

"""
A filter to be used against Datetime fields. All fields are combined with a logical ‘and.’
"""
input DatetimeFilter {
  """
  Is null (if `true` is specified) or is not null (if `false` is specified).
  """
  isNull: Boolean

  """Equal to the specified value."""
  equalTo: Datetime

  """Not equal to the specified value."""
  notEqualTo: Datetime

  """
  Not equal to the specified value, treating null like an ordinary value.
  """
  distinctFrom: Datetime

  """Equal to the specified value, treating null like an ordinary value."""
  notDistinctFrom: Datetime

  """Included in the specified list."""
  in: [Datetime!]

  """Not included in the specified list."""
  notIn: [Datetime!]

  """Less than the specified value."""
  lessThan: Datetime

  """Less than or equal to the specified value."""
  lessThanOrEqualTo: Datetime

  """Greater than the specified value."""
  greaterThan: Datetime

  """Greater than or equal to the specified value."""
  greaterThanOrEqualTo: Datetime
}

"""
A filter to be used against Float fields. All fields are combined with a logical ‘and.’
"""
input FloatFilter {
  """
  Is null (if `true` is specified) or is not null (if `false` is specified).
  """
  isNull: Boolean

  """Equal to the specified value."""
  equalTo: Float

  """Not equal to the specified value."""
  notEqualTo: Float

  """
  Not equal to the specified value, treating null like an ordinary value.
  """
  distinctFrom: Float

  """Equal to the specified value, treating null like an ordinary value."""
  notDistinctFrom: Float

  """Included in the specified list."""
  in: [Float!]

  """Not included in the specified list."""
  notIn: [Float!]

  """Less than the specified value."""
  lessThan: Float

  """Less than or equal to the specified value."""
  lessThanOrEqualTo: Float

  """Greater than the specified value."""
  greaterThan: Float

  """Greater than or equal to the specified value."""
  greaterThanOrEqualTo: Float
}

type Follow {
  followed: String!
  follower: String!
  timestamp: Datetime!

  """Reads a single `User` that is related to this `Follow`."""
  userByFollowed: User

  """Reads a single `User` that is related to this `Follow`."""
  userByFollower: User
}

"""
A condition to be used against `Follow` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input FollowCondition {
  """Checks for equality with the object’s `followed` field."""
  followed: String

  """Checks for equality with the object’s `follower` field."""
  follower: String

  """Checks for equality with the object’s `timestamp` field."""
  timestamp: Datetime
}

"""
A filter to be used against `Follow` object types. All fields are combined with a logical ‘and.’
"""
input FollowFilter {
  """Filter by the object’s `followed` field."""
  followed: StringFilter

  """Filter by the object’s `follower` field."""
  follower: StringFilter

  """Filter by the object’s `timestamp` field."""
  timestamp: DatetimeFilter

  """Checks for all expressions in this list."""
  and: [FollowFilter!]

  """Checks for any expressions in this list."""
  or: [FollowFilter!]

  """Negates the expression."""
  not: FollowFilter
}

enum FollowingStatus {
  FOLLOWING
  IS_SELF
  NOT_FOLLOWING
  ANONYMOUS
}

"""
A filter to be used against FollowingStatus fields. All fields are combined with a logical ‘and.’
"""
input FollowingStatusFilter {
  """
  Is null (if `true` is specified) or is not null (if `false` is specified).
  """
  isNull: Boolean

  """Equal to the specified value."""
  equalTo: FollowingStatus

  """Not equal to the specified value."""
  notEqualTo: FollowingStatus

  """
  Not equal to the specified value, treating null like an ordinary value.
  """
  distinctFrom: FollowingStatus

  """Equal to the specified value, treating null like an ordinary value."""
  notDistinctFrom: FollowingStatus

  """Included in the specified list."""
  in: [FollowingStatus!]

  """Not included in the specified list."""
  notIn: [FollowingStatus!]

  """Less than the specified value."""
  lessThan: FollowingStatus

  """Less than or equal to the specified value."""
  lessThanOrEqualTo: FollowingStatus

  """Greater than the specified value."""
  greaterThan: FollowingStatus

  """Greater than or equal to the specified value."""
  greaterThanOrEqualTo: FollowingStatus
}

"""A connection to a list of `Follow` values."""
type FollowsConnection {
  """A list of `Follow` objects."""
  nodes: [Follow]!

  """
  A list of edges which contains the `Follow` and cursor to aid in pagination.
  """
  edges: [FollowsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Follow` you could get from the connection."""
  totalCount: Int!
}

"""A `Follow` edge in the connection."""
type FollowsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Follow` at the end of the edge."""
  node: Follow
}

"""Methods to use when ordering `Follow`."""
enum FollowsOrderBy {
  NATURAL
  FOLLOWED_ASC
  FOLLOWED_DESC
  FOLLOWER_ASC
  FOLLOWER_DESC
  TIMESTAMP_ASC
  TIMESTAMP_DESC
}

type Geocode {
  countryCode: String!
  latitude: Float!
  longitude: Float!
  label: String!
}

type GeocodeResponse {
  success: Boolean!
  geocodes: [Geocode]
}

type Guide implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: String!
  title: String!
  slug: String!
  owner: String!
  startDate: String
  maxHoursPerRide: Int!
  created: Datetime!
  updated: Datetime
  transportType: TransportType!
  isCircular: Boolean!

  """Reads a single `User` that is related to this `Guide`."""
  userByOwner: User

  """Reads and enables pagination through a set of `Spot`."""
  spotsByGuide(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Spot`."""
    orderBy: [SpotsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: SpotCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: SpotFilter
  ): SpotsConnection!

  """Reads and enables pagination through a set of `Stage`."""
  stagesByGuide(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Stage`."""
    orderBy: [StagesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: StageCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: StageFilter
  ): StagesConnection!

  """Reads and enables pagination through a set of `Ride`."""
  ridesByGuide(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Ride`."""
    orderBy: [RidesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: RideCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: RideFilter
  ): RidesConnection!

  """Reads and enables pagination through a set of `Computation`."""
  computationsByGuide(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Computation`."""
    orderBy: [ComputationsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ComputationCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ComputationFilter
  ): ComputationsConnection!
  bounds: Bound
  countries: [String]
  distanceMeters: BigInt
  durationSeconds: BigInt
  isMine: Boolean
}

"""
A condition to be used against `Guide` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input GuideCondition {
  """Checks for equality with the object’s `id` field."""
  id: String

  """Checks for equality with the object’s `title` field."""
  title: String

  """Checks for equality with the object’s `slug` field."""
  slug: String

  """Checks for equality with the object’s `owner` field."""
  owner: String

  """Checks for equality with the object’s `startDate` field."""
  startDate: String

  """Checks for equality with the object’s `maxHoursPerRide` field."""
  maxHoursPerRide: Int

  """Checks for equality with the object’s `created` field."""
  created: Datetime

  """Checks for equality with the object’s `updated` field."""
  updated: Datetime

  """Checks for equality with the object’s `transportType` field."""
  transportType: TransportType

  """Checks for equality with the object’s `isCircular` field."""
  isCircular: Boolean
}

"""
A filter to be used against `Guide` object types. All fields are combined with a logical ‘and.’
"""
input GuideFilter {
  """Filter by the object’s `id` field."""
  id: StringFilter

  """Filter by the object’s `title` field."""
  title: StringFilter

  """Filter by the object’s `slug` field."""
  slug: StringFilter

  """Filter by the object’s `owner` field."""
  owner: StringFilter

  """Filter by the object’s `startDate` field."""
  startDate: StringFilter

  """Filter by the object’s `maxHoursPerRide` field."""
  maxHoursPerRide: IntFilter

  """Filter by the object’s `created` field."""
  created: DatetimeFilter

  """Filter by the object’s `updated` field."""
  updated: DatetimeFilter

  """Filter by the object’s `transportType` field."""
  transportType: TransportTypeFilter

  """Filter by the object’s `isCircular` field."""
  isCircular: BooleanFilter

  """Filter by the object’s `countries` field."""
  countries: StringListFilter

  """Filter by the object’s `distanceMeters` field."""
  distanceMeters: BigIntFilter

  """Filter by the object’s `durationSeconds` field."""
  durationSeconds: BigIntFilter

  """Filter by the object’s `isMine` field."""
  isMine: BooleanFilter

  """Checks for all expressions in this list."""
  and: [GuideFilter!]

  """Checks for any expressions in this list."""
  or: [GuideFilter!]

  """Negates the expression."""
  not: GuideFilter
}

"""A connection to a list of `Guide` values."""
type GuidesConnection {
  """A list of `Guide` objects."""
  nodes: [Guide]!

  """
  A list of edges which contains the `Guide` and cursor to aid in pagination.
  """
  edges: [GuidesEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Guide` you could get from the connection."""
  totalCount: Int!
}

"""A `Guide` edge in the connection."""
type GuidesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Guide` at the end of the edge."""
  node: Guide
}

"""Methods to use when ordering `Guide`."""
enum GuidesOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  TITLE_ASC
  TITLE_DESC
  SLUG_ASC
  SLUG_DESC
  OWNER_ASC
  OWNER_DESC
  START_DATE_ASC
  START_DATE_DESC
  MAX_HOURS_PER_RIDE_ASC
  MAX_HOURS_PER_RIDE_DESC
  CREATED_ASC
  CREATED_DESC
  UPDATED_ASC
  UPDATED_DESC
  TRANSPORT_TYPE_ASC
  TRANSPORT_TYPE_DESC
  IS_CIRCULAR_ASC
  IS_CIRCULAR_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A filter to be used against Int fields. All fields are combined with a logical ‘and.’
"""
input IntFilter {
  """
  Is null (if `true` is specified) or is not null (if `false` is specified).
  """
  isNull: Boolean

  """Equal to the specified value."""
  equalTo: Int

  """Not equal to the specified value."""
  notEqualTo: Int

  """
  Not equal to the specified value, treating null like an ordinary value.
  """
  distinctFrom: Int

  """Equal to the specified value, treating null like an ordinary value."""
  notDistinctFrom: Int

  """Included in the specified list."""
  in: [Int!]

  """Not included in the specified list."""
  notIn: [Int!]

  """Less than the specified value."""
  lessThan: Int

  """Less than or equal to the specified value."""
  lessThanOrEqualTo: Int

  """Greater than the specified value."""
  greaterThan: Int

  """Greater than or equal to the specified value."""
  greaterThanOrEqualTo: Int
}

"""
A JSON Web Token defined by [RFC 7519](https://tools.ietf.org/html/rfc7519)
which securely represents claims between two parties.
"""
scalar JwtToken

"""An object with a globally unique `ID`."""
interface Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: Cursor

  """When paginating forwards, the cursor to continue."""
  endCursor: Cursor
}

"""The root query type which gives access points into the data universe."""
type Query implements Node {
  """
  Exposes the root query type nested one level down. This is helpful for Relay 1
  which can only query top level fields if they are in a particular form.
  """
  query: Query!

  """
  The root query type must be a `Node` to work well with Relay 1 mutations. This just resolves to `query`.
  """
  nodeId: ID!

  """Fetches an object given its globally unique `ID`."""
  node(
    """The globally unique `ID`."""
    nodeId: ID!
  ): Node

  """Reads and enables pagination through a set of `Computation`."""
  computations(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Computation`."""
    orderBy: [ComputationsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ComputationCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ComputationFilter
  ): ComputationsConnection

  """Reads and enables pagination through a set of `Follow`."""
  follows(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Follow`."""
    orderBy: [FollowsOrderBy!] = [NATURAL]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FollowCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: FollowFilter
  ): FollowsConnection

  """Reads and enables pagination through a set of `Guide`."""
  guides(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Guide`."""
    orderBy: [GuidesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: GuideCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: GuideFilter
  ): GuidesConnection

  """Reads and enables pagination through a set of `Ride`."""
  rides(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Ride`."""
    orderBy: [RidesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: RideCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: RideFilter
  ): RidesConnection

  """Reads and enables pagination through a set of `Spot`."""
  spots(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Spot`."""
    orderBy: [SpotsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: SpotCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: SpotFilter
  ): SpotsConnection

  """Reads and enables pagination through a set of `Stage`."""
  stages(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Stage`."""
    orderBy: [StagesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: StageCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: StageFilter
  ): StagesConnection

  """Reads and enables pagination through a set of `Temperature`."""
  temperatures(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Temperature`."""
    orderBy: [TemperaturesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: TemperatureCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: TemperatureFilter
  ): TemperaturesConnection

  """Reads and enables pagination through a set of `User`."""
  users(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `User`."""
    orderBy: [UsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: UserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: UserFilter
  ): UsersConnection
  computation(id: String!): Computation
  guide(id: String!): Guide
  ride(id: String!): Ride
  spot(id: String!): Spot
  stage(id: String!): Stage
  temperature(id: String!): Temperature
  user(username: String!): User
  countries: [String]
  getCurrentUser: JwtToken

  """Reads a single `Computation` using its globally unique `ID`."""
  computationByNodeId(
    """
    The globally unique `ID` to be used in selecting a single `Computation`.
    """
    nodeId: ID!
  ): Computation

  """Reads a single `Guide` using its globally unique `ID`."""
  guideByNodeId(
    """The globally unique `ID` to be used in selecting a single `Guide`."""
    nodeId: ID!
  ): Guide

  """Reads a single `Ride` using its globally unique `ID`."""
  rideByNodeId(
    """The globally unique `ID` to be used in selecting a single `Ride`."""
    nodeId: ID!
  ): Ride

  """Reads a single `Spot` using its globally unique `ID`."""
  spotByNodeId(
    """The globally unique `ID` to be used in selecting a single `Spot`."""
    nodeId: ID!
  ): Spot

  """Reads a single `Stage` using its globally unique `ID`."""
  stageByNodeId(
    """The globally unique `ID` to be used in selecting a single `Stage`."""
    nodeId: ID!
  ): Stage

  """Reads a single `Temperature` using its globally unique `ID`."""
  temperatureByNodeId(
    """
    The globally unique `ID` to be used in selecting a single `Temperature`.
    """
    nodeId: ID!
  ): Temperature

  """Reads a single `User` using its globally unique `ID`."""
  userByNodeId(
    """The globally unique `ID` to be used in selecting a single `User`."""
    nodeId: ID!
  ): User
  appVersion: String!
  geocode(query: String!): GeocodeResponse!
}

type Ride implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: String!
  guide: String!
  owner: String!
  fromSpot: String!
  toSpot: String!
  pathUrl: String
  durationSeconds: Int
  distanceMeters: Int
  date: String
  stage: String!
  position: String
  status: RideStatus!
  created: Datetime!
  updated: Datetime

  """Reads a single `Guide` that is related to this `Ride`."""
  guideByGuide: Guide

  """Reads a single `User` that is related to this `Ride`."""
  userByOwner: User

  """Reads a single `Spot` that is related to this `Ride`."""
  spotByFromSpot: Spot

  """Reads a single `Spot` that is related to this `Ride`."""
  spotByToSpot: Spot

  """Reads a single `Stage` that is related to this `Ride`."""
  stageByStage: Stage
  countries: [String]
  hasBorder: Boolean
  isMine: Boolean
  name: String
}

"""
A condition to be used against `Ride` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input RideCondition {
  """Checks for equality with the object’s `id` field."""
  id: String

  """Checks for equality with the object’s `guide` field."""
  guide: String

  """Checks for equality with the object’s `owner` field."""
  owner: String

  """Checks for equality with the object’s `fromSpot` field."""
  fromSpot: String

  """Checks for equality with the object’s `toSpot` field."""
  toSpot: String

  """Checks for equality with the object’s `pathUrl` field."""
  pathUrl: String

  """Checks for equality with the object’s `durationSeconds` field."""
  durationSeconds: Int

  """Checks for equality with the object’s `distanceMeters` field."""
  distanceMeters: Int

  """Checks for equality with the object’s `date` field."""
  date: String

  """Checks for equality with the object’s `stage` field."""
  stage: String

  """Checks for equality with the object’s `position` field."""
  position: String

  """Checks for equality with the object’s `status` field."""
  status: RideStatus

  """Checks for equality with the object’s `created` field."""
  created: Datetime

  """Checks for equality with the object’s `updated` field."""
  updated: Datetime
}

"""
A filter to be used against `Ride` object types. All fields are combined with a logical ‘and.’
"""
input RideFilter {
  """Filter by the object’s `id` field."""
  id: StringFilter

  """Filter by the object’s `guide` field."""
  guide: StringFilter

  """Filter by the object’s `owner` field."""
  owner: StringFilter

  """Filter by the object’s `fromSpot` field."""
  fromSpot: StringFilter

  """Filter by the object’s `toSpot` field."""
  toSpot: StringFilter

  """Filter by the object’s `pathUrl` field."""
  pathUrl: StringFilter

  """Filter by the object’s `durationSeconds` field."""
  durationSeconds: IntFilter

  """Filter by the object’s `distanceMeters` field."""
  distanceMeters: IntFilter

  """Filter by the object’s `date` field."""
  date: StringFilter

  """Filter by the object’s `stage` field."""
  stage: StringFilter

  """Filter by the object’s `position` field."""
  position: StringFilter

  """Filter by the object’s `status` field."""
  status: RideStatusFilter

  """Filter by the object’s `created` field."""
  created: DatetimeFilter

  """Filter by the object’s `updated` field."""
  updated: DatetimeFilter

  """Filter by the object’s `countries` field."""
  countries: StringListFilter

  """Filter by the object’s `hasBorder` field."""
  hasBorder: BooleanFilter

  """Filter by the object’s `isMine` field."""
  isMine: BooleanFilter

  """Filter by the object’s `name` field."""
  name: StringFilter

  """Checks for all expressions in this list."""
  and: [RideFilter!]

  """Checks for any expressions in this list."""
  or: [RideFilter!]

  """Negates the expression."""
  not: RideFilter
}

"""A connection to a list of `Ride` values."""
type RidesConnection {
  """A list of `Ride` objects."""
  nodes: [Ride]!

  """
  A list of edges which contains the `Ride` and cursor to aid in pagination.
  """
  edges: [RidesEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Ride` you could get from the connection."""
  totalCount: Int!
}

"""A `Ride` edge in the connection."""
type RidesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Ride` at the end of the edge."""
  node: Ride
}

"""Methods to use when ordering `Ride`."""
enum RidesOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  GUIDE_ASC
  GUIDE_DESC
  OWNER_ASC
  OWNER_DESC
  FROM_SPOT_ASC
  FROM_SPOT_DESC
  TO_SPOT_ASC
  TO_SPOT_DESC
  PATH_URL_ASC
  PATH_URL_DESC
  DURATION_SECONDS_ASC
  DURATION_SECONDS_DESC
  DISTANCE_METERS_ASC
  DISTANCE_METERS_DESC
  DATE_ASC
  DATE_DESC
  STAGE_ASC
  STAGE_DESC
  POSITION_ASC
  POSITION_DESC
  STATUS_ASC
  STATUS_DESC
  CREATED_ASC
  CREATED_DESC
  UPDATED_ASC
  UPDATED_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

enum RideStatus {
  COMPLETE
  READY
  STALE
}

"""
A filter to be used against RideStatus fields. All fields are combined with a logical ‘and.’
"""
input RideStatusFilter {
  """
  Is null (if `true` is specified) or is not null (if `false` is specified).
  """
  isNull: Boolean

  """Equal to the specified value."""
  equalTo: RideStatus

  """Not equal to the specified value."""
  notEqualTo: RideStatus

  """
  Not equal to the specified value, treating null like an ordinary value.
  """
  distinctFrom: RideStatus

  """Equal to the specified value, treating null like an ordinary value."""
  notDistinctFrom: RideStatus

  """Included in the specified list."""
  in: [RideStatus!]

  """Not included in the specified list."""
  notIn: [RideStatus!]

  """Less than the specified value."""
  lessThan: RideStatus

  """Less than or equal to the specified value."""
  lessThanOrEqualTo: RideStatus

  """Greater than the specified value."""
  greaterThan: RideStatus

  """Greater than or equal to the specified value."""
  greaterThanOrEqualTo: RideStatus
}

type Spot implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: String!
  label: String
  guide: String!
  owner: String!
  nights: Int
  locked: Boolean!
  lat: Float!
  long: Float!
  position: String
  location: String
  country: String
  date: String
  created: Datetime!
  updated: Datetime
  stage: String

  """Reads a single `Guide` that is related to this `Spot`."""
  guideByGuide: Guide

  """Reads a single `User` that is related to this `Spot`."""
  userByOwner: User

  """Reads a single `Stage` that is related to this `Spot`."""
  stageByStage: Stage

  """Reads and enables pagination through a set of `Stage`."""
  stagesByFromSpot(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Stage`."""
    orderBy: [StagesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: StageCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: StageFilter
  ): StagesConnection!

  """Reads and enables pagination through a set of `Stage`."""
  stagesByToSpot(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Stage`."""
    orderBy: [StagesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: StageCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: StageFilter
  ): StagesConnection!

  """Reads and enables pagination through a set of `Ride`."""
  ridesByFromSpot(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Ride`."""
    orderBy: [RidesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: RideCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: RideFilter
  ): RidesConnection!

  """Reads and enables pagination through a set of `Ride`."""
  ridesByToSpot(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Ride`."""
    orderBy: [RidesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: RideCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: RideFilter
  ): RidesConnection!
  isMine: Boolean
  name: String
  temperature: Float
}

"""
A condition to be used against `Spot` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input SpotCondition {
  """Checks for equality with the object’s `id` field."""
  id: String

  """Checks for equality with the object’s `label` field."""
  label: String

  """Checks for equality with the object’s `guide` field."""
  guide: String

  """Checks for equality with the object’s `owner` field."""
  owner: String

  """Checks for equality with the object’s `nights` field."""
  nights: Int

  """Checks for equality with the object’s `locked` field."""
  locked: Boolean

  """Checks for equality with the object’s `lat` field."""
  lat: Float

  """Checks for equality with the object’s `long` field."""
  long: Float

  """Checks for equality with the object’s `position` field."""
  position: String

  """Checks for equality with the object’s `location` field."""
  location: String

  """Checks for equality with the object’s `country` field."""
  country: String

  """Checks for equality with the object’s `date` field."""
  date: String

  """Checks for equality with the object’s `created` field."""
  created: Datetime

  """Checks for equality with the object’s `updated` field."""
  updated: Datetime

  """Checks for equality with the object’s `stage` field."""
  stage: String
}

"""
A filter to be used against `Spot` object types. All fields are combined with a logical ‘and.’
"""
input SpotFilter {
  """Filter by the object’s `id` field."""
  id: StringFilter

  """Filter by the object’s `label` field."""
  label: StringFilter

  """Filter by the object’s `guide` field."""
  guide: StringFilter

  """Filter by the object’s `owner` field."""
  owner: StringFilter

  """Filter by the object’s `nights` field."""
  nights: IntFilter

  """Filter by the object’s `locked` field."""
  locked: BooleanFilter

  """Filter by the object’s `lat` field."""
  lat: FloatFilter

  """Filter by the object’s `long` field."""
  long: FloatFilter

  """Filter by the object’s `position` field."""
  position: StringFilter

  """Filter by the object’s `location` field."""
  location: StringFilter

  """Filter by the object’s `country` field."""
  country: StringFilter

  """Filter by the object’s `date` field."""
  date: StringFilter

  """Filter by the object’s `created` field."""
  created: DatetimeFilter

  """Filter by the object’s `updated` field."""
  updated: DatetimeFilter

  """Filter by the object’s `stage` field."""
  stage: StringFilter

  """Filter by the object’s `isMine` field."""
  isMine: BooleanFilter

  """Filter by the object’s `name` field."""
  name: StringFilter

  """Filter by the object’s `temperature` field."""
  temperature: FloatFilter

  """Checks for all expressions in this list."""
  and: [SpotFilter!]

  """Checks for any expressions in this list."""
  or: [SpotFilter!]

  """Negates the expression."""
  not: SpotFilter
}

"""A connection to a list of `Spot` values."""
type SpotsConnection {
  """A list of `Spot` objects."""
  nodes: [Spot]!

  """
  A list of edges which contains the `Spot` and cursor to aid in pagination.
  """
  edges: [SpotsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Spot` you could get from the connection."""
  totalCount: Int!
}

"""A `Spot` edge in the connection."""
type SpotsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Spot` at the end of the edge."""
  node: Spot
}

"""Methods to use when ordering `Spot`."""
enum SpotsOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  LABEL_ASC
  LABEL_DESC
  GUIDE_ASC
  GUIDE_DESC
  OWNER_ASC
  OWNER_DESC
  NIGHTS_ASC
  NIGHTS_DESC
  LOCKED_ASC
  LOCKED_DESC
  LAT_ASC
  LAT_DESC
  LONG_ASC
  LONG_DESC
  POSITION_ASC
  POSITION_DESC
  LOCATION_ASC
  LOCATION_DESC
  COUNTRY_ASC
  COUNTRY_DESC
  DATE_ASC
  DATE_DESC
  CREATED_ASC
  CREATED_DESC
  UPDATED_ASC
  UPDATED_DESC
  STAGE_ASC
  STAGE_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

type Stage implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: String!
  guide: String!
  fromSpot: String!
  toSpot: String!
  created: Datetime!
  updated: Datetime
  status: StageStatus!
  position: Int

  """Reads a single `Guide` that is related to this `Stage`."""
  guideByGuide: Guide

  """Reads a single `Spot` that is related to this `Stage`."""
  spotByFromSpot: Spot

  """Reads a single `Spot` that is related to this `Stage`."""
  spotByToSpot: Spot

  """Reads and enables pagination through a set of `Spot`."""
  spotsByStage(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Spot`."""
    orderBy: [SpotsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: SpotCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: SpotFilter
  ): SpotsConnection!

  """Reads and enables pagination through a set of `Ride`."""
  ridesByStage(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Ride`."""
    orderBy: [RidesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: RideCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: RideFilter
  ): RidesConnection!

  """Reads and enables pagination through a set of `Computation`."""
  computationsByStage(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Computation`."""
    orderBy: [ComputationsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ComputationCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ComputationFilter
  ): ComputationsConnection!
  name: String
}

"""
A condition to be used against `Stage` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input StageCondition {
  """Checks for equality with the object’s `id` field."""
  id: String

  """Checks for equality with the object’s `guide` field."""
  guide: String

  """Checks for equality with the object’s `fromSpot` field."""
  fromSpot: String

  """Checks for equality with the object’s `toSpot` field."""
  toSpot: String

  """Checks for equality with the object’s `created` field."""
  created: Datetime

  """Checks for equality with the object’s `updated` field."""
  updated: Datetime

  """Checks for equality with the object’s `status` field."""
  status: StageStatus

  """Checks for equality with the object’s `position` field."""
  position: Int
}

"""
A filter to be used against `Stage` object types. All fields are combined with a logical ‘and.’
"""
input StageFilter {
  """Filter by the object’s `id` field."""
  id: StringFilter

  """Filter by the object’s `guide` field."""
  guide: StringFilter

  """Filter by the object’s `fromSpot` field."""
  fromSpot: StringFilter

  """Filter by the object’s `toSpot` field."""
  toSpot: StringFilter

  """Filter by the object’s `created` field."""
  created: DatetimeFilter

  """Filter by the object’s `updated` field."""
  updated: DatetimeFilter

  """Filter by the object’s `status` field."""
  status: StageStatusFilter

  """Filter by the object’s `position` field."""
  position: IntFilter

  """Filter by the object’s `name` field."""
  name: StringFilter

  """Checks for all expressions in this list."""
  and: [StageFilter!]

  """Checks for any expressions in this list."""
  or: [StageFilter!]

  """Negates the expression."""
  not: StageFilter
}

"""A connection to a list of `Stage` values."""
type StagesConnection {
  """A list of `Stage` objects."""
  nodes: [Stage]!

  """
  A list of edges which contains the `Stage` and cursor to aid in pagination.
  """
  edges: [StagesEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Stage` you could get from the connection."""
  totalCount: Int!
}

"""A `Stage` edge in the connection."""
type StagesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Stage` at the end of the edge."""
  node: Stage
}

"""Methods to use when ordering `Stage`."""
enum StagesOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  GUIDE_ASC
  GUIDE_DESC
  FROM_SPOT_ASC
  FROM_SPOT_DESC
  TO_SPOT_ASC
  TO_SPOT_DESC
  CREATED_ASC
  CREATED_DESC
  UPDATED_ASC
  UPDATED_DESC
  STATUS_ASC
  STATUS_DESC
  POSITION_ASC
  POSITION_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

enum StageStatus {
  COMPLETE
  READY
  COMPUTING
  STALE
}

"""
A filter to be used against StageStatus fields. All fields are combined with a logical ‘and.’
"""
input StageStatusFilter {
  """
  Is null (if `true` is specified) or is not null (if `false` is specified).
  """
  isNull: Boolean

  """Equal to the specified value."""
  equalTo: StageStatus

  """Not equal to the specified value."""
  notEqualTo: StageStatus

  """
  Not equal to the specified value, treating null like an ordinary value.
  """
  distinctFrom: StageStatus

  """Equal to the specified value, treating null like an ordinary value."""
  notDistinctFrom: StageStatus

  """Included in the specified list."""
  in: [StageStatus!]

  """Not included in the specified list."""
  notIn: [StageStatus!]

  """Less than the specified value."""
  lessThan: StageStatus

  """Less than or equal to the specified value."""
  lessThanOrEqualTo: StageStatus

  """Greater than the specified value."""
  greaterThan: StageStatus

  """Greater than or equal to the specified value."""
  greaterThanOrEqualTo: StageStatus
}

"""
A filter to be used against String fields. All fields are combined with a logical ‘and.’
"""
input StringFilter {
  """
  Is null (if `true` is specified) or is not null (if `false` is specified).
  """
  isNull: Boolean

  """Equal to the specified value."""
  equalTo: String

  """Not equal to the specified value."""
  notEqualTo: String

  """
  Not equal to the specified value, treating null like an ordinary value.
  """
  distinctFrom: String

  """Equal to the specified value, treating null like an ordinary value."""
  notDistinctFrom: String

  """Included in the specified list."""
  in: [String!]

  """Not included in the specified list."""
  notIn: [String!]

  """Less than the specified value."""
  lessThan: String

  """Less than or equal to the specified value."""
  lessThanOrEqualTo: String

  """Greater than the specified value."""
  greaterThan: String

  """Greater than or equal to the specified value."""
  greaterThanOrEqualTo: String

  """Contains the specified string (case-sensitive)."""
  includes: String

  """Does not contain the specified string (case-sensitive)."""
  notIncludes: String

  """Contains the specified string (case-insensitive)."""
  includesInsensitive: String

  """Does not contain the specified string (case-insensitive)."""
  notIncludesInsensitive: String

  """Starts with the specified string (case-sensitive)."""
  startsWith: String

  """Does not start with the specified string (case-sensitive)."""
  notStartsWith: String

  """Starts with the specified string (case-insensitive)."""
  startsWithInsensitive: String

  """Does not start with the specified string (case-insensitive)."""
  notStartsWithInsensitive: String

  """Ends with the specified string (case-sensitive)."""
  endsWith: String

  """Does not end with the specified string (case-sensitive)."""
  notEndsWith: String

  """Ends with the specified string (case-insensitive)."""
  endsWithInsensitive: String

  """Does not end with the specified string (case-insensitive)."""
  notEndsWithInsensitive: String

  """
  Matches the specified pattern (case-sensitive). An underscore (_) matches any
  single character; a percent sign (%) matches any sequence of zero or more characters.
  """
  like: String

  """
  Does not match the specified pattern (case-sensitive). An underscore (_)
  matches any single character; a percent sign (%) matches any sequence of zero
  or more characters.
  """
  notLike: String

  """
  Matches the specified pattern (case-insensitive). An underscore (_) matches
  any single character; a percent sign (%) matches any sequence of zero or more characters.
  """
  likeInsensitive: String

  """
  Does not match the specified pattern (case-insensitive). An underscore (_)
  matches any single character; a percent sign (%) matches any sequence of zero
  or more characters.
  """
  notLikeInsensitive: String

  """
  Matches the specified pattern using the SQL standard's definition of a regular expression.
  """
  similarTo: String

  """
  Does not match the specified pattern using the SQL standard's definition of a regular expression.
  """
  notSimilarTo: String
}

"""
A filter to be used against String List fields. All fields are combined with a logical ‘and.’
"""
input StringListFilter {
  """
  Is null (if `true` is specified) or is not null (if `false` is specified).
  """
  isNull: Boolean

  """Equal to the specified value."""
  equalTo: [String]

  """Not equal to the specified value."""
  notEqualTo: [String]

  """
  Not equal to the specified value, treating null like an ordinary value.
  """
  distinctFrom: [String]

  """Equal to the specified value, treating null like an ordinary value."""
  notDistinctFrom: [String]

  """Less than the specified value."""
  lessThan: [String]

  """Less than or equal to the specified value."""
  lessThanOrEqualTo: [String]

  """Greater than the specified value."""
  greaterThan: [String]

  """Greater than or equal to the specified value."""
  greaterThanOrEqualTo: [String]

  """Contains the specified list of values."""
  contains: [String]

  """Contained by the specified list of values."""
  containedBy: [String]

  """Overlaps the specified list of values."""
  overlaps: [String]

  """Any array item is equal to the specified value."""
  anyEqualTo: String

  """Any array item is not equal to the specified value."""
  anyNotEqualTo: String

  """Any array item is less than the specified value."""
  anyLessThan: String

  """Any array item is less than or equal to the specified value."""
  anyLessThanOrEqualTo: String

  """Any array item is greater than the specified value."""
  anyGreaterThan: String

  """Any array item is greater than or equal to the specified value."""
  anyGreaterThanOrEqualTo: String
}

"""
The root subscription type: contains events and live queries you can subscribe to with the `subscription` operation.

#### Live Queries

Live query fields are differentiated by containing `(live)` at the end of their
description, they are added for each field in the `Query` type. When you
subscribe to a live query field, the selection set will be evaluated and sent to
the client, and then most things\* that would cause the output of the selection
set to change will trigger the selection set to be re-evaluated and the results
to be re-sent to the client.

_(\* Not everything: typically only changes to persisted data referenced by the query are detected, not computed fields.)_

Live queries can be very expensive, so try and keep them small and focussed.

#### Events

Event fields will run their selection set when, and only when, the specified
server-side event occurs. This makes them a lot more efficient than Live
Queries, but it is still recommended that you keep payloads fairly small.
"""
type Subscription {
  """
  Exposes the root query type nested one level down. This is helpful for Relay 1
  which can only query top level fields if they are in a particular form. (live)
  """
  query: Query!

  """
  The root query type must be a `Node` to work well with Relay 1 mutations. This just resolves to `query`. (live)
  """
  nodeId: ID!

  """Fetches an object given its globally unique `ID`. (live)"""
  node(
    """The globally unique `ID`."""
    nodeId: ID!
  ): Node

  """Reads and enables pagination through a set of `Computation`. (live)"""
  computations(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Computation`."""
    orderBy: [ComputationsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ComputationCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ComputationFilter
  ): ComputationsConnection

  """Reads and enables pagination through a set of `Follow`. (live)"""
  follows(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Follow`."""
    orderBy: [FollowsOrderBy!] = [NATURAL]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FollowCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: FollowFilter
  ): FollowsConnection

  """Reads and enables pagination through a set of `Guide`. (live)"""
  guides(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Guide`."""
    orderBy: [GuidesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: GuideCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: GuideFilter
  ): GuidesConnection

  """Reads and enables pagination through a set of `Ride`. (live)"""
  rides(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Ride`."""
    orderBy: [RidesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: RideCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: RideFilter
  ): RidesConnection

  """Reads and enables pagination through a set of `Spot`. (live)"""
  spots(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Spot`."""
    orderBy: [SpotsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: SpotCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: SpotFilter
  ): SpotsConnection

  """Reads and enables pagination through a set of `Stage`. (live)"""
  stages(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Stage`."""
    orderBy: [StagesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: StageCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: StageFilter
  ): StagesConnection

  """Reads and enables pagination through a set of `Temperature`. (live)"""
  temperatures(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Temperature`."""
    orderBy: [TemperaturesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: TemperatureCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: TemperatureFilter
  ): TemperaturesConnection

  """Reads and enables pagination through a set of `User`. (live)"""
  users(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `User`."""
    orderBy: [UsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: UserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: UserFilter
  ): UsersConnection

  """ (live)"""
  computation(id: String!): Computation

  """ (live)"""
  guide(id: String!): Guide

  """ (live)"""
  ride(id: String!): Ride

  """ (live)"""
  spot(id: String!): Spot

  """ (live)"""
  stage(id: String!): Stage

  """ (live)"""
  temperature(id: String!): Temperature

  """ (live)"""
  user(username: String!): User

  """ (live)"""
  countries: [String]

  """ (live)"""
  getCurrentUser: JwtToken

  """Reads a single `Computation` using its globally unique `ID`. (live)"""
  computationByNodeId(
    """
    The globally unique `ID` to be used in selecting a single `Computation`.
    """
    nodeId: ID!
  ): Computation

  """Reads a single `Guide` using its globally unique `ID`. (live)"""
  guideByNodeId(
    """The globally unique `ID` to be used in selecting a single `Guide`."""
    nodeId: ID!
  ): Guide

  """Reads a single `Ride` using its globally unique `ID`. (live)"""
  rideByNodeId(
    """The globally unique `ID` to be used in selecting a single `Ride`."""
    nodeId: ID!
  ): Ride

  """Reads a single `Spot` using its globally unique `ID`. (live)"""
  spotByNodeId(
    """The globally unique `ID` to be used in selecting a single `Spot`."""
    nodeId: ID!
  ): Spot

  """Reads a single `Stage` using its globally unique `ID`. (live)"""
  stageByNodeId(
    """The globally unique `ID` to be used in selecting a single `Stage`."""
    nodeId: ID!
  ): Stage

  """Reads a single `Temperature` using its globally unique `ID`. (live)"""
  temperatureByNodeId(
    """
    The globally unique `ID` to be used in selecting a single `Temperature`.
    """
    nodeId: ID!
  ): Temperature

  """Reads a single `User` using its globally unique `ID`. (live)"""
  userByNodeId(
    """The globally unique `ID` to be used in selecting a single `User`."""
    nodeId: ID!
  ): User

  """ (live)"""
  appVersion: String!

  """ (live)"""
  geocode(query: String!): GeocodeResponse!
}

type Temperature implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: String!
  country: String!
  month: Int!
  temperature: Float!
  created: Datetime!
  updated: Datetime
}

"""
A condition to be used against `Temperature` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input TemperatureCondition {
  """Checks for equality with the object’s `id` field."""
  id: String

  """Checks for equality with the object’s `country` field."""
  country: String

  """Checks for equality with the object’s `month` field."""
  month: Int

  """Checks for equality with the object’s `temperature` field."""
  temperature: Float

  """Checks for equality with the object’s `created` field."""
  created: Datetime

  """Checks for equality with the object’s `updated` field."""
  updated: Datetime
}

"""
A filter to be used against `Temperature` object types. All fields are combined with a logical ‘and.’
"""
input TemperatureFilter {
  """Filter by the object’s `id` field."""
  id: StringFilter

  """Filter by the object’s `country` field."""
  country: StringFilter

  """Filter by the object’s `month` field."""
  month: IntFilter

  """Filter by the object’s `temperature` field."""
  temperature: FloatFilter

  """Filter by the object’s `created` field."""
  created: DatetimeFilter

  """Filter by the object’s `updated` field."""
  updated: DatetimeFilter

  """Checks for all expressions in this list."""
  and: [TemperatureFilter!]

  """Checks for any expressions in this list."""
  or: [TemperatureFilter!]

  """Negates the expression."""
  not: TemperatureFilter
}

"""A connection to a list of `Temperature` values."""
type TemperaturesConnection {
  """A list of `Temperature` objects."""
  nodes: [Temperature]!

  """
  A list of edges which contains the `Temperature` and cursor to aid in pagination.
  """
  edges: [TemperaturesEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Temperature` you could get from the connection."""
  totalCount: Int!
}

"""A `Temperature` edge in the connection."""
type TemperaturesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Temperature` at the end of the edge."""
  node: Temperature
}

"""Methods to use when ordering `Temperature`."""
enum TemperaturesOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  COUNTRY_ASC
  COUNTRY_DESC
  MONTH_ASC
  MONTH_DESC
  TEMPERATURE_ASC
  TEMPERATURE_DESC
  CREATED_ASC
  CREATED_DESC
  UPDATED_ASC
  UPDATED_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

enum TransportType {
  MOTORCYCLE
  BICYCLE
  CAR
}

"""
A filter to be used against TransportType fields. All fields are combined with a logical ‘and.’
"""
input TransportTypeFilter {
  """
  Is null (if `true` is specified) or is not null (if `false` is specified).
  """
  isNull: Boolean

  """Equal to the specified value."""
  equalTo: TransportType

  """Not equal to the specified value."""
  notEqualTo: TransportType

  """
  Not equal to the specified value, treating null like an ordinary value.
  """
  distinctFrom: TransportType

  """Equal to the specified value, treating null like an ordinary value."""
  notDistinctFrom: TransportType

  """Included in the specified list."""
  in: [TransportType!]

  """Not included in the specified list."""
  notIn: [TransportType!]

  """Less than the specified value."""
  lessThan: TransportType

  """Less than or equal to the specified value."""
  lessThanOrEqualTo: TransportType

  """Greater than the specified value."""
  greaterThan: TransportType

  """Greater than or equal to the specified value."""
  greaterThanOrEqualTo: TransportType
}

type User implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  username: String!
  email: String!
  passwordHash: String!
  created: Datetime!
  updated: Datetime
  colour: Colour

  """Reads and enables pagination through a set of `Guide`."""
  guidesByOwner(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Guide`."""
    orderBy: [GuidesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: GuideCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: GuideFilter
  ): GuidesConnection!

  """Reads and enables pagination through a set of `Spot`."""
  spotsByOwner(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Spot`."""
    orderBy: [SpotsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: SpotCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: SpotFilter
  ): SpotsConnection!

  """Reads and enables pagination through a set of `Ride`."""
  ridesByOwner(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Ride`."""
    orderBy: [RidesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: RideCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: RideFilter
  ): RidesConnection!

  """Reads and enables pagination through a set of `Follow`."""
  followsByFollowed(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Follow`."""
    orderBy: [FollowsOrderBy!] = [NATURAL]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FollowCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: FollowFilter
  ): FollowsConnection!

  """Reads and enables pagination through a set of `Follow`."""
  followsByFollower(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Follow`."""
    orderBy: [FollowsOrderBy!] = [NATURAL]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FollowCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: FollowFilter
  ): FollowsConnection!
  countries: [String]
  distanceMeters: BigInt
  durationSeconds: BigInt
  followingStatus: FollowingStatus
}

"""
A condition to be used against `User` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input UserCondition {
  """Checks for equality with the object’s `username` field."""
  username: String

  """Checks for equality with the object’s `email` field."""
  email: String

  """Checks for equality with the object’s `passwordHash` field."""
  passwordHash: String

  """Checks for equality with the object’s `created` field."""
  created: Datetime

  """Checks for equality with the object’s `updated` field."""
  updated: Datetime

  """Checks for equality with the object’s `colour` field."""
  colour: Colour
}

"""
A filter to be used against `User` object types. All fields are combined with a logical ‘and.’
"""
input UserFilter {
  """Filter by the object’s `username` field."""
  username: StringFilter

  """Filter by the object’s `email` field."""
  email: StringFilter

  """Filter by the object’s `passwordHash` field."""
  passwordHash: StringFilter

  """Filter by the object’s `created` field."""
  created: DatetimeFilter

  """Filter by the object’s `updated` field."""
  updated: DatetimeFilter

  """Filter by the object’s `colour` field."""
  colour: ColourFilter

  """Filter by the object’s `countries` field."""
  countries: StringListFilter

  """Filter by the object’s `distanceMeters` field."""
  distanceMeters: BigIntFilter

  """Filter by the object’s `durationSeconds` field."""
  durationSeconds: BigIntFilter

  """Filter by the object’s `followingStatus` field."""
  followingStatus: FollowingStatusFilter

  """Checks for all expressions in this list."""
  and: [UserFilter!]

  """Checks for any expressions in this list."""
  or: [UserFilter!]

  """Negates the expression."""
  not: UserFilter
}

"""A connection to a list of `User` values."""
type UsersConnection {
  """A list of `User` objects."""
  nodes: [User]!

  """
  A list of edges which contains the `User` and cursor to aid in pagination.
  """
  edges: [UsersEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `User` you could get from the connection."""
  totalCount: Int!
}

"""A `User` edge in the connection."""
type UsersEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `User` at the end of the edge."""
  node: User
}

"""Methods to use when ordering `User`."""
enum UsersOrderBy {
  NATURAL
  USERNAME_ASC
  USERNAME_DESC
  EMAIL_ASC
  EMAIL_DESC
  PASSWORD_HASH_ASC
  PASSWORD_HASH_DESC
  CREATED_ASC
  CREATED_DESC
  UPDATED_ASC
  UPDATED_DESC
  COLOUR_ASC
  COLOUR_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}
