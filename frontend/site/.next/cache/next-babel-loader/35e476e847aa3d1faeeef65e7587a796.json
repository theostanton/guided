{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\n\nvar _dec,\n    _class,\n    _jsxFileName = \"/Users/theo/Code/guided/frontend/site/src/screens/Account/index.tsx\";\n\nvar __jsx = React.createElement;\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport StyleSheet from \"react-native-web/dist/cjs/exports/StyleSheet\";\nimport View from \"react-native-web/dist/cjs/exports/View\";\nimport React from 'react';\nimport { inject, observer } from 'mobx-react';\nimport LabelledText from 'components/LabelledText';\nvar AccountScreen = (_dec = inject('authStore'), _dec(_class = observer(_class = /*#__PURE__*/function (_React$Component) {\n  _inherits(AccountScreen, _React$Component);\n\n  var _super = _createSuper(AccountScreen);\n\n  function AccountScreen() {\n    _classCallCheck(this, AccountScreen);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(AccountScreen, [{\n    key: \"render\",\n    value: function render() {\n      return;\n      var user = this.props.authStore.user;\n\n      if (user) {\n        return __jsx(View, {\n          style: styles.root,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 18,\n            columnNumber: 9\n          }\n        }, __jsx(LabelledText, {\n          label: 'Email',\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 19,\n            columnNumber: 11\n          }\n        }, user.email), __jsx(LabelledText, {\n          label: 'Username',\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 20,\n            columnNumber: 11\n          }\n        }, user.username), __jsx(LabelledText, {\n          label: 'Token',\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 21,\n            columnNumber: 11\n          }\n        }, user.bearerToken));\n      } else {\n        return __jsx(View, {\n          style: styles.root,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 26,\n            columnNumber: 9\n          }\n        }, __jsx(LabelledText, {\n          label: 'User',\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 27,\n            columnNumber: 11\n          }\n        }, \"None\"));\n      }\n    }\n  }]);\n\n  return AccountScreen;\n}(React.Component)) || _class) || _class);\nexport { AccountScreen as default };\nvar styles = StyleSheet.create({\n  root: {\n    maxWidth: 400,\n    width: '100%',\n    alignSelf: 'center',\n    flexDirection: 'column'\n  }\n});","map":{"version":3,"sources":["/Users/theo/Code/guided/frontend/site/src/screens/Account/index.tsx"],"names":["React","inject","observer","LabelledText","AccountScreen","user","props","authStore","styles","root","email","username","bearerToken","Component","StyleSheet","create","maxWidth","width","alignSelf","flexDirection"],"mappings":";;;;;;;;;;;;;;;;;;AACA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAAQC,MAAR,EAAgBC,QAAhB,QAA+B,YAA/B;AAEA,OAAOC,YAAP,MAAyB,yBAAzB;IAMqBC,a,WAFpBH,MAAM,CAAC,WAAD,C,gBACNC,Q;;;;;;;;;;;;;6BAGU;AACP;AACA,UAAMG,IAAI,GAAG,KAAKC,KAAL,CAAWC,SAAX,CAAqBF,IAAlC;;AACA,UAAIA,IAAJ,EAAU;AACR,eACE,MAAC,IAAD;AAAM,UAAA,KAAK,EAAEG,MAAM,CAACC,IAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACE,MAAC,YAAD;AAAc,UAAA,KAAK,EAAE,OAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAA+BJ,IAAI,CAACK,KAApC,CADF,EAEE,MAAC,YAAD;AAAc,UAAA,KAAK,EAAE,UAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAAkCL,IAAI,CAACM,QAAvC,CAFF,EAGE,MAAC,YAAD;AAAc,UAAA,KAAK,EAAE,OAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAA+BN,IAAI,CAACO,WAApC,CAHF,CADF;AAOD,OARD,MAQO;AACL,eACE,MAAC,IAAD;AAAM,UAAA,KAAK,EAAEJ,MAAM,CAACC,IAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACE,MAAC,YAAD;AAAc,UAAA,KAAK,EAAE,MAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBADF,CADF;AAKD;AACF;;;;EApBwCT,KAAK,CAACa,S;SAA5BT,a;AAuBrB,IAAMI,MAAM,GAAGM,UAAU,CAACC,MAAX,CAAkB;AAC/BN,EAAAA,IAAI,EAAE;AACJO,IAAAA,QAAQ,EAAE,GADN;AAEJC,IAAAA,KAAK,EAAE,MAFH;AAGJC,IAAAA,SAAS,EAAE,QAHP;AAIJC,IAAAA,aAAa,EAAE;AAJX;AADyB,CAAlB,CAAf","sourcesContent":["import {StyleSheet, View} from 'react-native';\nimport React from 'react';\nimport {inject, observer} from 'mobx-react';\nimport {ScreenProps} from 'utils/routing';\nimport LabelledText from 'components/LabelledText';\n\ntype Props = ScreenProps<'Account'>\n\n@inject('authStore')\n@observer\nexport default class AccountScreen extends React.Component<Props> {\n\n  render() {\n    return;\n    const user = this.props.authStore.user;\n    if (user) {\n      return (\n        <View style={styles.root}>\n          <LabelledText label={'Email'}>{user.email}</LabelledText>\n          <LabelledText label={'Username'}>{user.username}</LabelledText>\n          <LabelledText label={'Token'}>{user.bearerToken}</LabelledText>\n        </View>\n      );\n    } else {\n      return (\n        <View style={styles.root}>\n          <LabelledText label={'User'}>None</LabelledText>\n        </View>\n      );\n    }\n  }\n}\n\nconst styles = StyleSheet.create({\n  root: {\n    maxWidth: 400,\n    width: '100%',\n    alignSelf: 'center',\n    flexDirection: 'column',\n  }\n});\n"]},"metadata":{},"sourceType":"module"}