{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { ApolloClient, HttpLink, InMemoryCache } from 'apollo-boost';\nimport { setContext } from 'apollo-link-context';\nimport fetch from 'node-fetch';\nimport { SubscriptionClient } from 'subscriptions-transport-ws';\nimport ws from 'ws';\nimport { WebSocketLink } from 'apollo-link-ws';\nimport * as storage from 'utils/storage';\nimport * as envs from 'utils/envs';\nexport var USER_KEY = 'guidedUser';\n\nfunction httpLink() {\n  return new HttpLink({\n    uri: envs.get('GUIDED_GRAPHQL'),\n    // @ts-ignore\n    fetch: fetch\n  });\n}\n\nfunction authLink() {\n  return setContext( /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(_, _ref) {\n      var headers, value, user;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              headers = _ref.headers;\n              _context.prev = 1;\n              _context.next = 4;\n              return storage.exists(USER_KEY);\n\n            case 4:\n              if (!_context.sent) {\n                _context.next = 5;\n                break;\n              }\n\n            case 5:\n              value = storage.get(USER_KEY);\n\n              if (!value) {\n                _context.next = 9;\n                break;\n              }\n\n              user = JSON.parse(value);\n              return _context.abrupt(\"return\", {\n                headers: _objectSpread(_objectSpread({}, headers), {}, {\n                  authorization: \"Bearer \".concat(user.bearerToken)\n                })\n              });\n\n            case 9:\n              _context.next = 14;\n              break;\n\n            case 11:\n              _context.prev = 11;\n              _context.t0 = _context[\"catch\"](1);\n              console.error(_context.t0);\n\n            case 14:\n              return _context.abrupt(\"return\", {\n                headers: headers\n              });\n\n            case 15:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, null, [[1, 11]]);\n    }));\n\n    return function (_x, _x2) {\n      return _ref2.apply(this, arguments);\n    };\n  }());\n}\n\nfunction subscriptionLink() {\n  var wsForNode = false ? ws : null;\n  var wsClient = new SubscriptionClient(envs.get('GUIDED_WEBSOCKET'), {\n    reconnect: true\n  }, wsForNode);\n  return new WebSocketLink(wsClient);\n}\n\nif (!envs.exists('GUIDED_GRAPHQL')) {\n  throw new Error(\"Requires GUIDED_GRAPHQL\");\n}\n\nif (!envs.exists('GUIDED_WEBSOCKET')) {\n  throw new Error(\"Requires GUIDED_WEBSOCKET\");\n}\n\nvar defaultOptions = {\n  watchQuery: {\n    fetchPolicy: 'no-cache',\n    errorPolicy: 'all'\n  },\n  query: {\n    fetchPolicy: 'no-cache',\n    errorPolicy: 'all'\n  }\n};\nexport var subscriptionClient = new ApolloClient({\n  connectToDevTools: true,\n  //TODO can't send custom headers on websocket, so cant auth via postgraphile expected method\n  link: subscriptionLink(),\n  cache: new InMemoryCache(),\n  defaultOptions: defaultOptions\n});\nexport default new ApolloClient({\n  connectToDevTools: true,\n  link: authLink().concat(httpLink()),\n  cache: new InMemoryCache(),\n  defaultOptions: defaultOptions\n});","map":{"version":3,"sources":["/Users/theo/Code/guided/frontend/site/src/api/client.ts"],"names":["ApolloClient","HttpLink","InMemoryCache","setContext","fetch","SubscriptionClient","ws","WebSocketLink","storage","envs","USER_KEY","httpLink","uri","get","authLink","_","headers","exists","value","user","JSON","parse","authorization","bearerToken","console","error","subscriptionLink","wsForNode","wsClient","reconnect","Error","defaultOptions","watchQuery","fetchPolicy","errorPolicy","query","subscriptionClient","connectToDevTools","link","cache","concat"],"mappings":"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","sourcesContent":["import {\n  ApolloClient,\n  ApolloLink,\n  DefaultOptions,\n  HttpLink,\n  InMemoryCache,\n} from 'apollo-boost';\n\nimport {setContext} from 'apollo-link-context';\nimport fetch from 'node-fetch';\nimport {SubscriptionClient} from 'subscriptions-transport-ws';\nimport ws from 'ws';\nimport {WebSocketLink} from 'apollo-link-ws';\nimport {User} from 'stores/AuthStore';\nimport * as storage from 'utils/storage';\nimport * as envs from 'utils/envs';\n\nexport const USER_KEY = 'guidedUser';\n\nfunction httpLink(): ApolloLink {\n  return new HttpLink({\n    uri: envs.get('GUIDED_GRAPHQL'),\n    // @ts-ignore\n    fetch: fetch,\n  });\n}\n\nfunction authLink(): ApolloLink {\n  return setContext(async (_, {headers}) => {\n    try {\n      if (await storage.exists(USER_KEY)) {\n      }\n      const value = storage.get(USER_KEY);\n      if (value) {\n        const user = JSON.parse(value) as User;\n        return {\n          headers: {\n            ...headers,\n            authorization: `Bearer ${user.bearerToken}`,\n          },\n        };\n      }\n    } catch (e) {\n      console.error(e);\n    }\n    return {\n      headers,\n    };\n  });\n}\n\nfunction subscriptionLink(): ApolloLink {\n  const wsForNode = typeof window === 'undefined' ? ws : null;\n  const wsClient = new SubscriptionClient(\n    envs.get('GUIDED_WEBSOCKET'),\n    {\n      reconnect: true,\n    },\n    wsForNode,\n  );\n\n  return new WebSocketLink(wsClient);\n}\n\nif (!envs.exists('GUIDED_GRAPHQL')) {\n  throw new Error(`Requires GUIDED_GRAPHQL`);\n}\n\nif (!envs.exists('GUIDED_WEBSOCKET')) {\n  throw new Error(`Requires GUIDED_WEBSOCKET`);\n}\n\nconst defaultOptions: DefaultOptions = {\n  watchQuery: {\n    fetchPolicy: 'no-cache',\n    errorPolicy: 'all',\n  },\n  query: {\n    fetchPolicy: 'no-cache',\n    errorPolicy: 'all',\n  },\n};\n\nexport const subscriptionClient = new ApolloClient({\n  connectToDevTools: true,\n  //TODO can't send custom headers on websocket, so cant auth via postgraphile expected method\n  link: subscriptionLink(),\n  cache: new InMemoryCache(),\n  defaultOptions,\n});\n\nexport default new ApolloClient({\n  connectToDevTools: true,\n  link: authLink().concat(httpLink()),\n  cache: new InMemoryCache(),\n  defaultOptions,\n});\n"]},"metadata":{},"sourceType":"module"}