{"ast":null,"code":"var _dec,\n    _class,\n    _jsxFileName = \"/Users/theo/Code/guided/frontend/site/src/components/Profile/index.tsx\";\n\nvar __jsx = React.createElement;\nimport React from 'react';\nimport StyleSheet from \"react-native-web/dist/cjs/exports/StyleSheet\";\nimport View from \"react-native-web/dist/cjs/exports/View\";\nimport { inject } from 'mobx-react';\nimport LabelledText from '../LabelledText';\nlet Profile = (_dec = inject('authStore'), _dec(_class = class Profile extends React.Component {\n  render() {\n    const user = this.props.authStore.user;\n\n    if (user) {\n      return __jsx(View, {\n        style: styles.root,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 18,\n          columnNumber: 9\n        }\n      }, __jsx(LabelledText, {\n        label: 'Email',\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 19,\n          columnNumber: 11\n        }\n      }, user.email), __jsx(LabelledText, {\n        label: 'Username',\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 20,\n          columnNumber: 11\n        }\n      }, user.username), __jsx(LabelledText, {\n        label: 'Token',\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 21,\n          columnNumber: 11\n        }\n      }, user.bearerToken));\n    } else {\n      return __jsx(View, {\n        style: styles.root,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 26,\n          columnNumber: 9\n        }\n      }, __jsx(LabelledText, {\n        label: 'User',\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 27,\n          columnNumber: 11\n        }\n      }, \"None\"));\n    }\n  }\n\n}) || _class);\nexport { Profile as default };\nconst styles = StyleSheet.create({\n  root: {\n    maxWidth: 400,\n    width: '100%',\n    alignSelf: 'center',\n    flexDirection: 'column'\n  },\n  textInput: {},\n  button: {}\n});","map":{"version":3,"sources":["/Users/theo/Code/guided/frontend/site/src/components/Profile/index.tsx"],"names":["React","inject","LabelledText","Profile","Component","render","user","props","authStore","styles","root","email","username","bearerToken","StyleSheet","create","maxWidth","width","alignSelf","flexDirection","textInput","button"],"mappings":";;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;;;AAGA,SAAQC,MAAR,QAAqB,YAArB;AAEA,OAAOC,YAAP,MAAyB,iBAAzB;IAOqBC,O,WADpBF,MAAM,CAAC,WAAD,C,gBAAP,MACqBE,OADrB,SACqCH,KAAK,CAACI,SAD3C,CAC4D;AAC1DC,EAAAA,MAAM,GAAG;AACP,UAAMC,IAAI,GAAG,KAAKC,KAAL,CAAWC,SAAX,CAAqBF,IAAlC;;AACA,QAAIA,IAAJ,EAAU;AACR,aACE,MAAC,IAAD;AAAM,QAAA,KAAK,EAAEG,MAAM,CAACC,IAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE,MAAC,YAAD;AAAc,QAAA,KAAK,EAAE,OAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAA+BJ,IAAI,CAACK,KAApC,CADF,EAEE,MAAC,YAAD;AAAc,QAAA,KAAK,EAAE,UAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAkCL,IAAI,CAACM,QAAvC,CAFF,EAGE,MAAC,YAAD;AAAc,QAAA,KAAK,EAAE,OAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAA+BN,IAAI,CAACO,WAApC,CAHF,CADF;AAOD,KARD,MAQO;AACL,aACE,MAAC,IAAD;AAAM,QAAA,KAAK,EAAEJ,MAAM,CAACC,IAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE,MAAC,YAAD;AAAc,QAAA,KAAK,EAAE,MAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADF,CADF;AAKD;AACF;;AAlByD,C;SAAvCP,O;AAqBrB,MAAMM,MAAM,GAAGK,UAAU,CAACC,MAAX,CAAkB;AAC/BL,EAAAA,IAAI,EAAE;AACJM,IAAAA,QAAQ,EAAE,GADN;AAEJC,IAAAA,KAAK,EAAE,MAFH;AAGJC,IAAAA,SAAS,EAAE,QAHP;AAIJC,IAAAA,aAAa,EAAE;AAJX,GADyB;AAO/BC,EAAAA,SAAS,EAAE,EAPoB;AAQ/BC,EAAAA,MAAM,EAAE;AARuB,CAAlB,CAAf","sourcesContent":["import React from 'react';\nimport {Button, StyleSheet, Text, View} from 'react-native';\nimport AuthStore from 'stores/AuthStore';\nimport {inject} from 'mobx-react';\nimport LabelledTextInput from 'components/LabelledTextInput';\nimport LabelledText from '../LabelledText';\n\ntype Props = {\n  authStore?: AuthStore;\n};\n\n@inject('authStore')\nexport default class Profile extends React.Component<Props> {\n  render() {\n    const user = this.props.authStore.user;\n    if (user) {\n      return (\n        <View style={styles.root}>\n          <LabelledText label={'Email'}>{user.email}</LabelledText>\n          <LabelledText label={'Username'}>{user.username}</LabelledText>\n          <LabelledText label={'Token'}>{user.bearerToken}</LabelledText>\n        </View>\n      );\n    } else {\n      return (\n        <View style={styles.root}>\n          <LabelledText label={'User'}>None</LabelledText>\n        </View>\n      );\n    }\n  }\n}\n\nconst styles = StyleSheet.create({\n  root: {\n    maxWidth: 400,\n    width: '100%',\n    alignSelf: 'center',\n    flexDirection: 'column',\n  },\n  textInput: {},\n  button: {},\n});\n"]},"metadata":{},"sourceType":"module"}