{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { AsyncStorage } from '@react-native-community/async-storage';\nvar storage = new AsyncStorage();\nexport function setItem(_x, _x2) {\n  return _setItem.apply(this, arguments);\n}\n\nfunction _setItem() {\n  _setItem = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(key, value) {\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            return _context.abrupt(\"return\", storage.set(key, value));\n\n          case 1:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _setItem.apply(this, arguments);\n}\n\nfunction setToken(value) {\n  return setItem('token', value);\n}\n\nfunction getToken(value) {\n  return getItem('token', value);\n}\n\nfunction removeItem(key) {\n  var items = storageService.store();\n  delete items[key];\n  localStorage[namespace] = JSON.stringify(items);\n  return storageService;\n}\n\nfunction getItem(key) {\n  var items = storageService.store();\n  return items[key];\n}\n\nfunction store() {\n  return JSON.parse(localStorage[namespace]);\n}\n\nfunction clear() {\n  delete localStorage[namespace];\n  initWithNamespace(namespace);\n  return storageService;\n}\n\nfunction initWithNamespace(nspace) {\n  if (typeof localStorage !== 'undefined') {\n    localStorage[nspace] = localStorage[nspace] ? localStorage[nspace] : '{}';\n  }\n}\n\nfunction getAllFromLocalStorage() {\n  return Promise.resolve(JSON.parse(localStorage[namespace]));\n}","map":{"version":3,"sources":["/Users/theo/Code/guided/frontend/site/src/utils/storage.ts"],"names":["AsyncStorage","storage","setItem","key","value","set","setToken","getToken","getItem","removeItem","items","storageService","store","localStorage","namespace","JSON","stringify","parse","clear","initWithNamespace","nspace","getAllFromLocalStorage","Promise","resolve"],"mappings":";;AAAA,SAAQA,YAAR,QAA2B,uCAA3B;AAEA,IAAMC,OAAO,GAAG,IAAID,YAAJ,EAAhB;AAEA,gBAAsBE,OAAtB;AAAA;AAAA;;;sEAAO,iBAAuBC,GAAvB,EAAoCC,KAApC;AAAA;AAAA;AAAA;AAAA;AAAA,6CACEH,OAAO,CAACI,GAAR,CAAYF,GAAZ,EAAiBC,KAAjB,CADF;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;;;AAIP,SAASE,QAAT,CAAkBF,KAAlB,EAAyB;AACvB,SAAOF,OAAO,CAAC,OAAD,EAAUE,KAAV,CAAd;AACD;;AAED,SAASG,QAAT,CAAkBH,KAAlB,EAAyB;AACvB,SAAOI,OAAO,CAAC,OAAD,EAAUJ,KAAV,CAAd;AACD;;AAED,SAASK,UAAT,CAAoBN,GAApB,EAAyB;AACvB,MAAMO,KAAK,GAAGC,cAAc,CAACC,KAAf,EAAd;AACA,SAAOF,KAAK,CAACP,GAAD,CAAZ;AACAU,EAAAA,YAAY,CAACC,SAAD,CAAZ,GAA0BC,IAAI,CAACC,SAAL,CAAeN,KAAf,CAA1B;AAEA,SAAOC,cAAP;AACD;;AAED,SAASH,OAAT,CAAiBL,GAAjB,EAAsB;AACpB,MAAMO,KAAK,GAAGC,cAAc,CAACC,KAAf,EAAd;AAEA,SAAOF,KAAK,CAACP,GAAD,CAAZ;AACD;;AAED,SAASS,KAAT,GAAiB;AACf,SAAOG,IAAI,CAACE,KAAL,CAAWJ,YAAY,CAACC,SAAD,CAAvB,CAAP;AACD;;AAED,SAASI,KAAT,GAAiB;AACf,SAAOL,YAAY,CAACC,SAAD,CAAnB;AACAK,EAAAA,iBAAiB,CAACL,SAAD,CAAjB;AAEA,SAAOH,cAAP;AACD;;AAED,SAASQ,iBAAT,CAA2BC,MAA3B,EAAmC;AACjC,MAAI,OAAOP,YAAP,KAAwB,WAA5B,EAAyC;AACvCA,IAAAA,YAAY,CAACO,MAAD,CAAZ,GAAuBP,YAAY,CAACO,MAAD,CAAZ,GAAuBP,YAAY,CAACO,MAAD,CAAnC,GAA8C,IAArE;AACD;AACF;;AAED,SAASC,sBAAT,GAAkC;AAChC,SAAOC,OAAO,CAACC,OAAR,CAAgBR,IAAI,CAACE,KAAL,CAAWJ,YAAY,CAACC,SAAD,CAAvB,CAAhB,CAAP;AACD","sourcesContent":["import {AsyncStorage} from '@react-native-community/async-storage';\n\nconst storage = new AsyncStorage();\n\nexport async function setItem(key: string, value: string) {\n  return storage.set(key, value);\n}\n\nfunction setToken(value) {\n  return setItem('token', value);\n}\n\nfunction getToken(value) {\n  return getItem('token', value);\n}\n\nfunction removeItem(key) {\n  const items = storageService.store();\n  delete items[key];\n  localStorage[namespace] = JSON.stringify(items);\n\n  return storageService;\n}\n\nfunction getItem(key) {\n  const items = storageService.store();\n\n  return items[key];\n}\n\nfunction store() {\n  return JSON.parse(localStorage[namespace]);\n}\n\nfunction clear() {\n  delete localStorage[namespace];\n  initWithNamespace(namespace);\n\n  return storageService;\n}\n\nfunction initWithNamespace(nspace) {\n  if (typeof localStorage !== 'undefined') {\n    localStorage[nspace] = localStorage[nspace] ? localStorage[nspace] : '{}';\n  }\n}\n\nfunction getAllFromLocalStorage() {\n  return Promise.resolve(JSON.parse(localStorage[namespace]));\n}\n"]},"metadata":{},"sourceType":"module"}