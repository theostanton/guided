{"ast":null,"code":"var _dec,\n    _class,\n    _jsxFileName = \"/Users/theo/Code/guided/frontend/site/src/components/Profile/index.tsx\";\n\nvar __jsx = React.createElement;\nimport React from 'react';\nimport Button from \"react-native-web/dist/cjs/exports/Button\";\nimport StyleSheet from \"react-native-web/dist/cjs/exports/StyleSheet\";\nimport View from \"react-native-web/dist/cjs/exports/View\";\nimport { inject } from 'mobx-react';\nimport LabelledTextInput from 'components/LabelledTextInput';\nlet Profile = (_dec = inject('authStore'), _dec(_class = class Profile extends React.Component {\n  get buttonDisabled() {\n    console.log('buttonDisabled()');\n    return this.state.email.length === 0 || this.state.password.length === 0 || this.state.loading === true;\n  }\n\n  async logIn() {\n    const {\n      password,\n      email\n    } = this.state;\n    this.setState({\n      loading: true\n    });\n\n    try {\n      const result = await this.props.authStore.login(email, password);\n\n      if (result.success) {// await navigate(`/`)\n      } else {\n        this.setState({\n          error: result.message || 'Something went wrong',\n          loading: false\n        });\n      }\n    } catch (e) {\n      console.error(e);\n      this.setState({\n        error: e,\n        loading: false\n      });\n    }\n  }\n\n  render() {\n    return __jsx(View, {\n      style: styles.root,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 7\n      }\n    }, __jsx(View, {\n      style: styles.textInput,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 9\n      }\n    }, __jsx(LabelledTextInput, {\n      label: 'Email',\n      onChange: text => {\n        this.setState({\n          email: text\n        });\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 11\n      }\n    }, \"Login component\")), __jsx(View, {\n      style: styles.textInput,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 9\n      }\n    }, __jsx(LabelledTextInput, {\n      label: 'Password',\n      inputType: 'password',\n      onChange: text => {\n        this.setState({\n          password: text\n        });\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 11\n      }\n    }, \"Login component\")), __jsx(View, {\n      style: styles.button,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 9\n      }\n    }, __jsx(Button, {\n      title: 'Log in',\n      disabled: this.buttonDisabled,\n      onPress: async () => {\n        await this.logIn();\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 11\n      }\n    })));\n  }\n\n}) || _class);\nexport { Profile as default };\nconst styles = StyleSheet.create({\n  root: {\n    maxWidth: 400,\n    width: '100%',\n    alignSelf: 'center',\n    flexDirection: 'column'\n  },\n  textInput: {},\n  button: {}\n});","map":{"version":3,"sources":["/Users/theo/Code/guided/frontend/site/src/components/Profile/index.tsx"],"names":["React","inject","LabelledTextInput","Profile","Component","buttonDisabled","console","log","state","email","length","password","loading","logIn","setState","result","props","authStore","login","success","error","message","e","render","styles","root","textInput","text","button","StyleSheet","create","maxWidth","width","alignSelf","flexDirection"],"mappings":"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","sourcesContent":["import React from 'react';\nimport {Button, StyleSheet, View} from 'react-native';\nimport AuthStore from 'stores/AuthStore';\nimport {inject} from 'mobx-react';\nimport LabelledTextInput from 'components/LabelledTextInput';\n\ntype Props = {\n  authStore?: AuthStore;\n};\n\n@inject('authStore')\nexport default class Profile extends React.Component<Props, State> {\n  get buttonDisabled(): boolean {\n    console.log('buttonDisabled()');\n    return (\n      this.state.email.length === 0 ||\n      this.state.password.length === 0 ||\n      this.state.loading === true\n    );\n  }\n\n  async logIn(): Promise<void> {\n    const {password, email} = this.state;\n    this.setState({loading: true});\n    try {\n      const result = await this.props.authStore.login(email, password);\n      if (result.success) {\n        // await navigate(`/`)\n      } else {\n        this.setState({\n          error: result.message || 'Something went wrong',\n          loading: false,\n        });\n      }\n    } catch (e) {\n      console.error(e);\n      this.setState({error: e, loading: false});\n    }\n  }\n\n  render() {\n    return (\n      <View style={styles.root}>\n        <View style={styles.textInput}>\n          <LabelledTextInput\n            label={'Email'}\n            onChange={(text) => {\n              this.setState({\n                email: text,\n              });\n            }}>\n            Login component\n          </LabelledTextInput>\n        </View>\n        <View style={styles.textInput}>\n          <LabelledTextInput\n            label={'Password'}\n            inputType={'password'}\n            onChange={(text) => {\n              this.setState({\n                password: text,\n              });\n            }}>\n            Login component\n          </LabelledTextInput>\n        </View>\n        <View style={styles.button}>\n          <Button\n            title={'Log in'}\n            disabled={this.buttonDisabled}\n            onPress={async () => {\n              await this.logIn();\n            }}\n          />\n        </View>\n      </View>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  root: {\n    maxWidth: 400,\n    width: '100%',\n    alignSelf: 'center',\n    flexDirection: 'column',\n  },\n  textInput: {},\n  button: {},\n});\n"]},"metadata":{},"sourceType":"module"}