{"ast":null,"code":"var _dec,\n    _class,\n    _jsxFileName = \"/Users/theo/Code/guided/frontend/site/src/screens/Account/index.tsx\";\n\nvar __jsx = React.createElement;\nimport StyleSheet from \"react-native-web/dist/cjs/exports/StyleSheet\";\nimport View from \"react-native-web/dist/cjs/exports/View\";\nimport React from 'react';\nimport { inject, observer } from 'mobx-react';\nimport LabelledText from 'components/LabelledText';\nlet AccountScreen = (_dec = inject('authStore'), _dec(_class = observer(_class = class AccountScreen extends React.Component {\n  render() {\n    return;\n    const user = this.props.authStore.user;\n\n    if (user) {\n      return __jsx(View, {\n        style: styles.root,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 18,\n          columnNumber: 9\n        }\n      }, __jsx(LabelledText, {\n        label: 'Email',\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 19,\n          columnNumber: 11\n        }\n      }, user.email), __jsx(LabelledText, {\n        label: 'Username',\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 20,\n          columnNumber: 11\n        }\n      }, user.username), __jsx(LabelledText, {\n        label: 'Token',\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 21,\n          columnNumber: 11\n        }\n      }, user.bearerToken));\n    } else {\n      return __jsx(View, {\n        style: styles.root,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 26,\n          columnNumber: 9\n        }\n      }, __jsx(LabelledText, {\n        label: 'User',\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 27,\n          columnNumber: 11\n        }\n      }, \"None\"));\n    }\n  }\n\n}) || _class) || _class);\nexport { AccountScreen as default };\nconst styles = StyleSheet.create({\n  root: {\n    maxWidth: 400,\n    width: '100%',\n    alignSelf: 'center',\n    flexDirection: 'column'\n  }\n});","map":{"version":3,"sources":["/Users/theo/Code/guided/frontend/site/src/screens/Account/index.tsx"],"names":["React","inject","observer","LabelledText","AccountScreen","Component","render","user","props","authStore","styles","root","email","username","bearerToken","StyleSheet","create","maxWidth","width","alignSelf","flexDirection"],"mappings":";;;;;;;AACA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAAQC,MAAR,EAAgBC,QAAhB,QAA+B,YAA/B;AAEA,OAAOC,YAAP,MAAyB,yBAAzB;IAMqBC,a,WAFpBH,MAAM,CAAC,WAAD,C,gBACNC,Q,UADD,MAEqBE,aAFrB,SAE2CJ,KAAK,CAACK,SAFjD,CAEkE;AAEhEC,EAAAA,MAAM,GAAG;AACP;AACA,UAAMC,IAAI,GAAG,KAAKC,KAAL,CAAWC,SAAX,CAAqBF,IAAlC;;AACA,QAAIA,IAAJ,EAAU;AACR,aACE,MAAC,IAAD;AAAM,QAAA,KAAK,EAAEG,MAAM,CAACC,IAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE,MAAC,YAAD;AAAc,QAAA,KAAK,EAAE,OAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAA+BJ,IAAI,CAACK,KAApC,CADF,EAEE,MAAC,YAAD;AAAc,QAAA,KAAK,EAAE,UAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAkCL,IAAI,CAACM,QAAvC,CAFF,EAGE,MAAC,YAAD;AAAc,QAAA,KAAK,EAAE,OAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAA+BN,IAAI,CAACO,WAApC,CAHF,CADF;AAOD,KARD,MAQO;AACL,aACE,MAAC,IAAD;AAAM,QAAA,KAAK,EAAEJ,MAAM,CAACC,IAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE,MAAC,YAAD;AAAc,QAAA,KAAK,EAAE,MAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADF,CADF;AAKD;AACF;;AApB+D,C;SAA7CP,a;AAuBrB,MAAMM,MAAM,GAAGK,UAAU,CAACC,MAAX,CAAkB;AAC/BL,EAAAA,IAAI,EAAE;AACJM,IAAAA,QAAQ,EAAE,GADN;AAEJC,IAAAA,KAAK,EAAE,MAFH;AAGJC,IAAAA,SAAS,EAAE,QAHP;AAIJC,IAAAA,aAAa,EAAE;AAJX;AADyB,CAAlB,CAAf","sourcesContent":["import {StyleSheet, View} from 'react-native';\nimport React from 'react';\nimport {inject, observer} from 'mobx-react';\nimport {ScreenProps} from 'utils/routing';\nimport LabelledText from 'components/LabelledText';\n\ntype Props = ScreenProps<'Account'>\n\n@inject('authStore')\n@observer\nexport default class AccountScreen extends React.Component<Props> {\n\n  render() {\n    return;\n    const user = this.props.authStore.user;\n    if (user) {\n      return (\n        <View style={styles.root}>\n          <LabelledText label={'Email'}>{user.email}</LabelledText>\n          <LabelledText label={'Username'}>{user.username}</LabelledText>\n          <LabelledText label={'Token'}>{user.bearerToken}</LabelledText>\n        </View>\n      );\n    } else {\n      return (\n        <View style={styles.root}>\n          <LabelledText label={'User'}>None</LabelledText>\n        </View>\n      );\n    }\n  }\n}\n\nconst styles = StyleSheet.create({\n  root: {\n    maxWidth: 400,\n    width: '100%',\n    alignSelf: 'center',\n    flexDirection: 'column',\n  }\n});\n"]},"metadata":{},"sourceType":"module"}