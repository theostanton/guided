{"ast":null,"code":"var _dec,\n    _class,\n    _temp,\n    _jsxFileName = \"/Users/theo/Code/guided/frontend/site/src/components/Login/index.tsx\";\n\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React from 'react';\nimport Button from \"react-native-web/dist/cjs/exports/Button\";\nimport StyleSheet from \"react-native-web/dist/cjs/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/cjs/exports/Text\";\nimport View from \"react-native-web/dist/cjs/exports/View\";\nimport { inject } from 'mobx-react';\nimport LabelledTextInput from 'components/LabelledTextInput';\nimport { h4 } from '../../styles/text';\nlet Login = (_dec = inject('authStore'), _dec(_class = (_temp = class Login extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      email: '',\n      password: '',\n      error: undefined,\n      loading: false\n    };\n  }\n\n  get buttonDisabled() {\n    console.log('buttonDisabled()');\n    return this.state.email.length === 0 || this.state.password.length === 0 || this.state.loading === true;\n  }\n\n  async logIn() {\n    const {\n      password,\n      email\n    } = this.state;\n    this.setState({\n      loading: true\n    });\n\n    try {\n      const result = await this.props.authStore.login(email, password);\n\n      if (result.success) {// await navigate(`/`)\n      } else {\n        this.setState({\n          error: result.message || 'Something went wrong',\n          loading: false\n        });\n      }\n    } catch (e) {\n      console.error(e);\n      this.setState({\n        error: e,\n        loading: false\n      });\n    }\n  }\n\n  render() {\n    return __jsx(View, {\n      style: styles.root,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 7\n      }\n    }, __jsx(View, {\n      style: styles.textInput,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 9\n      }\n    }, __jsx(LabelledTextInput, {\n      label: 'Email',\n      onChange: text => {\n        this.setState({\n          email: text\n        });\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 11\n      }\n    }, \"Login component\")), __jsx(View, {\n      style: styles.textInput,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 9\n      }\n    }, __jsx(LabelledTextInput, {\n      label: 'Password',\n      inputType: 'password',\n      onChange: text => {\n        this.setState({\n          password: text\n        });\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 11\n      }\n    }, \"Login component\")), __jsx(View, {\n      style: styles.button,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 9\n      }\n    }, __jsx(Button, {\n      title: 'Log in',\n      disabled: this.buttonDisabled,\n      onPress: async () => {\n        await this.logIn();\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 11\n      }\n    })), __jsx(View, {\n      style: styles.already,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 9\n      }\n    }, __jsx(Text, {\n      onPress: async () => {\n        await this.props.router.goToSignup();\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 11\n      }\n    }, \"Not a member? Click to sign up\")));\n  }\n\n}, _temp)) || _class);\nexport { Login as default };\nconst styles = StyleSheet.create({\n  root: {\n    maxWidth: 400,\n    width: '100%',\n    alignSelf: 'center',\n    flexDirection: 'column'\n  },\n  textInput: {},\n  button: {},\n  already: _objectSpread({}, h4)\n});","map":{"version":3,"sources":["/Users/theo/Code/guided/frontend/site/src/components/Login/index.tsx"],"names":["React","inject","LabelledTextInput","h4","Login","Component","state","email","password","error","undefined","loading","buttonDisabled","console","log","length","logIn","setState","result","props","authStore","login","success","message","e","render","styles","root","textInput","text","button","already","router","goToSignup","StyleSheet","create","maxWidth","width","alignSelf","flexDirection"],"mappings":"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","sourcesContent":["import React from 'react';\nimport {Button, StyleSheet, Text, View} from 'react-native';\nimport AuthStore from 'stores/AuthStore';\nimport {inject} from 'mobx-react';\nimport LabelledTextInput from 'components/LabelledTextInput';\nimport {RouterProp} from '../../utils/router/RouterProp';\nimport {h4} from '../../styles/text';\n\ntype Props = RouterProp & {\n  authStore?: AuthStore;\n};\ntype State = {\n  email: string;\n  password: string;\n  loading: boolean;\n  error: any | undefined;\n};\n\n@inject('authStore')\nexport default class Login extends React.Component<Props, State> {\n  state: State = {\n    email: '',\n    password: '',\n    error: undefined,\n    loading: false,\n  };\n\n  get buttonDisabled(): boolean {\n    console.log('buttonDisabled()');\n    return (\n      this.state.email.length === 0 ||\n      this.state.password.length === 0 ||\n      this.state.loading === true\n    );\n  }\n\n  async logIn(): Promise<void> {\n    const {password, email} = this.state;\n    this.setState({loading: true});\n    try {\n      const result = await this.props.authStore.login(email, password);\n      if (result.success) {\n        // await navigate(`/`)\n      } else {\n        this.setState({\n          error: result.message || 'Something went wrong',\n          loading: false,\n        });\n      }\n    } catch (e) {\n      console.error(e);\n      this.setState({error: e, loading: false});\n    }\n  }\n\n  render() {\n    return (\n      <View style={styles.root}>\n        <View style={styles.textInput}>\n          <LabelledTextInput\n            label={'Email'}\n            onChange={(text) => {\n              this.setState({\n                email: text,\n              });\n            }}>\n            Login component\n          </LabelledTextInput>\n        </View>\n        <View style={styles.textInput}>\n          <LabelledTextInput\n            label={'Password'}\n            inputType={'password'}\n            onChange={(text) => {\n              this.setState({\n                password: text,\n              });\n            }}>\n            Login component\n          </LabelledTextInput>\n        </View>\n        <View style={styles.button}>\n          <Button\n            title={'Log in'}\n            disabled={this.buttonDisabled}\n            onPress={async () => {\n              await this.logIn();\n            }}\n          />\n        </View>\n        <View style={styles.already}>\n          <Text\n            onPress={async () => {\n              await this.props.router.goToSignup()\n            }}\n          >\n            Not a member? Click to sign up\n          </Text>\n        </View>\n      </View>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  root: {\n    maxWidth: 400,\n    width: '100%',\n    alignSelf: 'center',\n    flexDirection: 'column',\n  },\n  textInput: {},\n  button: {},\n  already: {\n    ...h4\n  },\n});\n"]},"metadata":{},"sourceType":"module"}