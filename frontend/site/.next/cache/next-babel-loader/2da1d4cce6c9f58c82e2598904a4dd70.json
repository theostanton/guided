{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { ApolloClient, HttpLink, InMemoryCache } from 'apollo-boost';\nimport { setContext } from 'apollo-link-context';\nimport fetch from 'node-fetch';\nimport { SubscriptionClient } from 'subscriptions-transport-ws';\nimport ws from 'ws';\nimport { WebSocketLink } from 'apollo-link-ws';\nexport const USER_KEY = 'guidedUser';\n\nfunction httpLink() {\n  if (!process.env.GUIDED_GRAPHQL) {\n    throw new Error('No process.env.GUIDED_GRAPHQL provided');\n  }\n\n  return new HttpLink({\n    uri: process.env.GUIDED_GRAPHQL,\n    // @ts-ignore\n    fetch: fetch\n  });\n}\n\nfunction authLink() {\n  return setContext((_, {\n    headers\n  }) => {\n    try {\n      const value = store.get(USER_KEY);\n\n      if (value) {\n        const user = JSON.parse(value);\n        return {\n          headers: _objectSpread(_objectSpread({}, headers), {}, {\n            authorization: `Bearer ${user.bearerToken}`\n          })\n        };\n      }\n    } catch (e) {\n      console.error(e);\n    }\n\n    return {\n      headers\n    };\n  });\n}\n\nfunction subscriptionLink() {\n  if (!process.env.GUIDED_WEBSOCKET) {\n    throw new Error('No process.env.GUIDED_WEBSOCKET provided');\n  }\n\n  const wsForNode = true ? ws : null;\n  const wsClient = new SubscriptionClient(process.env.GUIDED_WEBSOCKET, {\n    reconnect: true\n  }, wsForNode);\n  return new WebSocketLink(wsClient);\n}\n\nif (!process.env.GUIDED_GRAPHQL) {\n  throw new Error(`Requires GUIDED_GRAPHQL`);\n}\n\nif (!process.env.GUIDED_WEBSOCKET) {\n  throw new Error(`Requires GUIDED_WEBSOCKET`);\n}\n\nconst defaultOptions = {\n  watchQuery: {\n    fetchPolicy: 'no-cache',\n    errorPolicy: 'all'\n  },\n  query: {\n    fetchPolicy: 'no-cache',\n    errorPolicy: 'all'\n  }\n};\nexport const subscriptionClient = new ApolloClient({\n  connectToDevTools: true,\n  //TODO can't send custom headers on websocket, so cant auth via postgraphile expected method\n  link: subscriptionLink(),\n  cache: new InMemoryCache(),\n  defaultOptions\n});\nexport default new ApolloClient({\n  connectToDevTools: true,\n  link: authLink().concat(httpLink()),\n  cache: new InMemoryCache(),\n  defaultOptions\n});","map":{"version":3,"sources":["/Users/theo/Code/guided/frontend/site/src/api/client.ts"],"names":["ApolloClient","HttpLink","InMemoryCache","setContext","fetch","SubscriptionClient","ws","WebSocketLink","USER_KEY","httpLink","process","env","GUIDED_GRAPHQL","Error","uri","authLink","_","headers","value","store","get","user","JSON","parse","authorization","bearerToken","e","console","error","subscriptionLink","GUIDED_WEBSOCKET","wsForNode","wsClient","reconnect","defaultOptions","watchQuery","fetchPolicy","errorPolicy","query","subscriptionClient","connectToDevTools","link","cache","concat"],"mappings":"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","sourcesContent":["import {\n  ApolloClient,\n  HttpLink,\n  InMemoryCache,\n  DefaultOptions,\n  ApolloLink,\n} from 'apollo-boost';\n\nimport {setContext} from 'apollo-link-context';\nimport fetch from 'node-fetch';\nimport {SubscriptionClient} from 'subscriptions-transport-ws';\nimport ws from 'ws';\nimport {WebSocketLink} from 'apollo-link-ws';\nimport {User} from 'stores/AuthStore';\n\nexport const USER_KEY = 'guidedUser';\n\nfunction httpLink(): ApolloLink {\n  if (!process.env.GUIDED_GRAPHQL) {\n    throw new Error('No process.env.GUIDED_GRAPHQL provided');\n  }\n\n  return new HttpLink({\n    uri: process.env.GUIDED_GRAPHQL,\n    // @ts-ignore\n    fetch: fetch,\n  });\n}\n\nfunction authLink(): ApolloLink {\n  return setContext((_, {headers}) => {\n    try {\n      const value = store.get(USER_KEY);\n      if (value) {\n        const user = JSON.parse(value) as User;\n        return {\n          headers: {\n            ...headers,\n            authorization: `Bearer ${user.bearerToken}`,\n          },\n        };\n      }\n    } catch (e) {\n      console.error(e);\n    }\n    return {\n      headers,\n    };\n  });\n}\n\nfunction subscriptionLink(): ApolloLink {\n  if (!process.env.GUIDED_WEBSOCKET) {\n    throw new Error('No process.env.GUIDED_WEBSOCKET provided');\n  }\n\n  const wsForNode = typeof window === 'undefined' ? ws : null;\n  const wsClient = new SubscriptionClient(\n    process.env.GUIDED_WEBSOCKET,\n    {\n      reconnect: true,\n    },\n    wsForNode,\n  );\n\n  return new WebSocketLink(wsClient);\n}\n\nif (!process.env.GUIDED_GRAPHQL) {\n  throw new Error(`Requires GUIDED_GRAPHQL`);\n}\nif (!process.env.GUIDED_WEBSOCKET) {\n  throw new Error(`Requires GUIDED_WEBSOCKET`);\n}\n\nconst defaultOptions: DefaultOptions = {\n  watchQuery: {\n    fetchPolicy: 'no-cache',\n    errorPolicy: 'all',\n  },\n  query: {\n    fetchPolicy: 'no-cache',\n    errorPolicy: 'all',\n  },\n};\n\nexport const subscriptionClient = new ApolloClient({\n  connectToDevTools: true,\n  //TODO can't send custom headers on websocket, so cant auth via postgraphile expected method\n  link: subscriptionLink(),\n  cache: new InMemoryCache(),\n  defaultOptions,\n});\n\nexport default new ApolloClient({\n  connectToDevTools: true,\n  link: authLink().concat(httpLink()),\n  cache: new InMemoryCache(),\n  defaultOptions,\n});\n"]},"metadata":{},"sourceType":"module"}