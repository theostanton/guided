{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\n\nvar _dec,\n    _class,\n    _jsxFileName = \"/Users/theo/Code/guided/frontend/site/src/pages/account.tsx\";\n\nvar __jsx = React.createElement;\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport StyleSheet from \"react-native-web/dist/cjs/exports/StyleSheet\";\nimport View from \"react-native-web/dist/cjs/exports/View\";\nimport Layout from 'components/Layout';\nimport LabelledTextInput from 'components/LabelledTextInput';\nimport React from 'react';\nimport { inject, observer } from 'mobx-react';\nvar AccountPage = (_dec = inject('authStore'), _dec(_class = observer(_class = /*#__PURE__*/function (_React$Component) {\n  _inherits(AccountPage, _React$Component);\n\n  var _super = _createSuper(AccountPage);\n\n  function AccountPage() {\n    _classCallCheck(this, AccountPage);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(AccountPage, [{\n    key: \"render\",\n    value: function render() {\n      var user = this.props.authStore.user;\n\n      if (user) {\n        return __jsx(Layout, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 20,\n            columnNumber: 9\n          }\n        }, __jsx(View, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 21,\n            columnNumber: 11\n          }\n        }, __jsx(LabelledTextInput, {\n          label: 'Username',\n          initialText: user.username,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 22,\n            columnNumber: 13\n          }\n        }), __jsx(LabelledTextInput, {\n          label: 'Email',\n          initialText: user.email,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 23,\n            columnNumber: 13\n          }\n        })));\n      } else {\n        return __jsx(Layout, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 28,\n            columnNumber: 14\n          }\n        });\n      }\n    }\n  }]);\n\n  return AccountPage;\n}(React.Component)) || _class) || _class);\nexport { AccountPage as default };\nvar styles = StyleSheet.create({});","map":{"version":3,"sources":["/Users/theo/Code/guided/frontend/site/src/pages/account.tsx"],"names":["Layout","LabelledTextInput","React","inject","observer","AccountPage","user","props","authStore","username","email","Component","styles","StyleSheet","create"],"mappings":";;;;;;;;;;;;;;;;;;AACA,OAAOA,MAAP,MAAmB,mBAAnB;AACA,OAAOC,iBAAP,MAA8B,8BAA9B;AACA,OAAOC,KAAP,MAAkB,OAAlB;AAEA,SAAQC,MAAR,EAAgBC,QAAhB,QAA+B,YAA/B;IASqBC,W,WAFpBF,MAAM,CAAC,WAAD,C,gBACNC,Q;;;;;;;;;;;;;6BAEU;AACP,UAAME,IAAI,GAAG,KAAKC,KAAL,CAAWC,SAAX,CAAqBF,IAAlC;;AACA,UAAIA,IAAJ,EAAU;AACR,eACE,MAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACE,MAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACE,MAAC,iBAAD;AAAmB,UAAA,KAAK,EAAE,UAA1B;AAAsC,UAAA,WAAW,EAAEA,IAAI,CAACG,QAAxD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UADF,EAEE,MAAC,iBAAD;AAAmB,UAAA,KAAK,EAAE,OAA1B;AAAmC,UAAA,WAAW,EAAEH,IAAI,CAACI,KAArD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAFF,CADF,CADF;AAQD,OATD,MASO;AACL,eAAO,MAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAP;AACD;AACF;;;;EAfsCR,KAAK,CAACS,S;SAA1BN,W;AAkBrB,IAAMO,MAAM,GAAGC,UAAU,CAACC,MAAX,CAAkB,EAAlB,CAAf","sourcesContent":["import {StyleSheet, Text, View} from 'react-native';\nimport Layout from 'components/Layout';\nimport LabelledTextInput from 'components/LabelledTextInput';\nimport React from 'react';\nimport {h1} from 'styles/text';\nimport {inject, observer} from 'mobx-react';\nimport AuthStore from 'stores/AuthStore';\n\ntype Props = {\n  authStore: AuthStore;\n};\n\n@inject('authStore')\n@observer\nexport default class AccountPage extends React.Component<Props> {\n  render() {\n    const user = this.props.authStore.user;\n    if (user) {\n      return (\n        <Layout>\n          <View>\n            <LabelledTextInput label={'Username'} initialText={user.username} />\n            <LabelledTextInput label={'Email'} initialText={user.email} />\n          </View>\n        </Layout>\n      );\n    } else {\n      return <Layout />;\n    }\n  }\n}\n\nconst styles = StyleSheet.create({});\n"]},"metadata":{},"sourceType":"module"}