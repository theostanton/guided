{"ast":null,"code":"var _dec,\n    _class,\n    _temp,\n    _jsxFileName = \"/Users/theo/Code/guided/frontend/site/src/components/Login/index.tsx\";\n\nvar __jsx = React.createElement;\nimport React from 'react';\nimport Button from \"react-native-web/dist/cjs/exports/Button\";\nimport StyleSheet from \"react-native-web/dist/cjs/exports/StyleSheet\";\nimport View from \"react-native-web/dist/cjs/exports/View\";\nimport { inject } from 'mobx-react';\nimport LabelledTextInput from 'components/LabelledTextInput';\nlet Login = (_dec = inject('authStore'), _dec(_class = (_temp = class Login extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      email: '',\n      password: '',\n      error: undefined,\n      loading: false\n    };\n  }\n\n  get buttonDisabled() {\n    return this.state.email.length === 0 || this.state.password.length === 0 || this.state.loading;\n  }\n\n  async logIn() {\n    const {\n      password,\n      email\n    } = this.state;\n    this.setState({\n      loading: true\n    });\n\n    try {\n      const result = await this.props.authStore.login(email, password);\n\n      if (result.success) {// await navigate(`/`)\n      } else {\n        this.setState({\n          error: result.message || 'Something went wrong',\n          loading: false\n        });\n      }\n    } catch (e) {\n      console.error(e);\n      this.setState({\n        error: e,\n        loading: false\n      });\n    }\n  }\n\n  render() {\n    return __jsx(View, {\n      style: styles.root,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 7\n      }\n    }, __jsx(View, {\n      style: styles.textInput,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 9\n      }\n    }, __jsx(LabelledTextInput, {\n      label: 'email',\n      onChange: text => {\n        console.log('email->', text);\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 11\n      }\n    }, \"Login component\")), __jsx(View, {\n      style: styles.textInput,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 9\n      }\n    }, __jsx(LabelledTextInput, {\n      label: 'password',\n      onChange: text => {\n        console.log('password->', text);\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 11\n      }\n    }, \"Login component\"), __jsx(View, {\n      style: styles.button,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 11\n      }\n    }, __jsx(Button, {\n      title: 'Log in',\n      disabled: this.buttonDisabled,\n      onPress: async () => {\n        await this.logIn();\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 13\n      }\n    }))));\n  }\n\n}, _temp)) || _class);\nexport { Login as default };\nconst styles = StyleSheet.create({\n  root: {\n    maxWidth: 400,\n    width: '100%',\n    alignSelf: 'center',\n    flexDirection: 'column'\n  },\n  textInput: {// flex: 1,\n  },\n  button: {}\n});","map":{"version":3,"sources":["/Users/theo/Code/guided/frontend/site/src/components/Login/index.tsx"],"names":["React","inject","LabelledTextInput","Login","Component","state","email","password","error","undefined","loading","buttonDisabled","length","logIn","setState","result","props","authStore","login","success","message","e","console","render","styles","root","textInput","text","log","button","StyleSheet","create","maxWidth","width","alignSelf","flexDirection"],"mappings":"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","sourcesContent":["import React from 'react';\nimport {Button, StyleSheet, View} from 'react-native';\nimport AuthStore from 'stores/AuthStore';\nimport {inject} from 'mobx-react';\nimport LabelledTextInput from 'components/LabelledTextInput';\n\ntype Props = {\n  authStore?: AuthStore;\n};\ntype State = {\n  email: string;\n  password: string;\n  loading: boolean;\n  error: any | undefined;\n};\n\n@inject('authStore')\nexport default class Login extends React.Component<Props, State> {\n  state: State = {\n    email: '',\n    password: '',\n    error: undefined,\n    loading: false,\n  };\n\n  get buttonDisabled(): boolean {\n    return (\n      this.state.email.length === 0 ||\n      this.state.password.length === 0 ||\n      this.state.loading\n    );\n  }\n\n  async logIn(): Promise<void> {\n    const {password, email} = this.state;\n    this.setState({loading: true});\n    try {\n      const result = await this.props.authStore.login(email, password);\n      if (result.success) {\n        // await navigate(`/`)\n      } else {\n        this.setState({\n          error: result.message || 'Something went wrong',\n          loading: false,\n        });\n      }\n    } catch (e) {\n      console.error(e);\n      this.setState({error: e, loading: false});\n    }\n  }\n\n  render() {\n    return (\n      <View style={styles.root}>\n        <View style={styles.textInput}>\n          <LabelledTextInput\n            label={'email'}\n            onChange={(text) => {\n              console.log('email->', text);\n            }}>\n            Login component\n          </LabelledTextInput>\n        </View>\n        <View style={styles.textInput}>\n          <LabelledTextInput\n            label={'password'}\n            onChange={(text) => {\n              console.log('password->', text);\n            }}>\n            Login component\n          </LabelledTextInput>\n          <View style={styles.button}>\n            <Button\n              title={'Log in'}\n              disabled={this.buttonDisabled}\n              onPress={async () => {\n                await this.logIn();\n              }}\n            />\n          </View>\n        </View>\n      </View>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  root: {\n    maxWidth: 400,\n    width: '100%',\n    alignSelf: 'center',\n    flexDirection: 'column',\n  },\n  textInput: {\n    // flex: 1,\n  },\n  button: {},\n});\n"]},"metadata":{},"sourceType":"module"}