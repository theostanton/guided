{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { ApolloClient, HttpLink, InMemoryCache } from 'apollo-boost';\nimport { setContext } from 'apollo-link-context';\nimport fetch from 'node-fetch';\nimport { SubscriptionClient } from 'subscriptions-transport-ws';\nimport ws from 'ws';\nimport { WebSocketLink } from 'apollo-link-ws';\nimport * as storage from 'utils/storage';\nimport * as envs from 'utils/envs';\nexport const USER_KEY = 'guidedUser';\n\nfunction httpLink() {\n  return new HttpLink({\n    uri: envs.get('GUIDED_GRAPHQL'),\n    // @ts-ignore\n    fetch: fetch\n  });\n}\n\nfunction authLink() {\n  return setContext(async (_, {\n    headers\n  }) => {\n    try {\n      if (await storage.exists(USER_KEY)) {}\n\n      const value = storage.get(USER_KEY);\n\n      if (value) {\n        const user = JSON.parse(value);\n        return {\n          headers: _objectSpread(_objectSpread({}, headers), {}, {\n            authorization: `Bearer ${user.bearerToken}`\n          })\n        };\n      }\n    } catch (e) {\n      console.error(e);\n    }\n\n    return {\n      headers\n    };\n  });\n}\n\nfunction subscriptionLink() {\n  const wsForNode = true ? ws : null;\n  const wsClient = new SubscriptionClient(envs.get('GUIDED_WEBSOCKET'), {\n    reconnect: true\n  }, wsForNode);\n  return new WebSocketLink(wsClient);\n}\n\nif (!envs.exists('GUIDED_GRAPHQL')) {\n  throw new Error(`Requires GUIDED_GRAPHQL`);\n}\n\nif (!envs.exists('GUIDED_WEBSOCKET')) {\n  throw new Error(`Requires GUIDED_WEBSOCKET`);\n}\n\nconst defaultOptions = {\n  watchQuery: {\n    fetchPolicy: 'no-cache',\n    errorPolicy: 'all'\n  },\n  query: {\n    fetchPolicy: 'no-cache',\n    errorPolicy: 'all'\n  }\n};\nexport const subscriptionClient = new ApolloClient({\n  connectToDevTools: true,\n  //TODO can't send custom headers on websocket, so cant auth via postgraphile expected method\n  link: subscriptionLink(),\n  cache: new InMemoryCache(),\n  defaultOptions\n});\nexport default new ApolloClient({\n  connectToDevTools: true,\n  link: authLink().concat(httpLink()),\n  cache: new InMemoryCache(),\n  defaultOptions\n});","map":{"version":3,"sources":["/Users/theo/Code/guided/frontend/site/src/api/client.ts"],"names":["ApolloClient","HttpLink","InMemoryCache","setContext","fetch","SubscriptionClient","ws","WebSocketLink","storage","envs","USER_KEY","httpLink","uri","get","authLink","_","headers","exists","value","user","JSON","parse","authorization","bearerToken","e","console","error","subscriptionLink","wsForNode","wsClient","reconnect","Error","defaultOptions","watchQuery","fetchPolicy","errorPolicy","query","subscriptionClient","connectToDevTools","link","cache","concat"],"mappings":"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","sourcesContent":["import {\n  ApolloClient,\n  ApolloLink,\n  DefaultOptions,\n  HttpLink,\n  InMemoryCache,\n} from 'apollo-boost';\n\nimport {setContext} from 'apollo-link-context';\nimport fetch from 'node-fetch';\nimport {SubscriptionClient} from 'subscriptions-transport-ws';\nimport ws from 'ws';\nimport {WebSocketLink} from 'apollo-link-ws';\nimport {User} from 'stores/AuthStore';\nimport * as storage from 'utils/storage';\nimport * as envs from 'utils/envs';\n\nexport const USER_KEY = 'guidedUser';\n\nfunction httpLink(): ApolloLink {\n  return new HttpLink({\n    uri: envs.get('GUIDED_GRAPHQL'),\n    // @ts-ignore\n    fetch: fetch,\n  });\n}\n\nfunction authLink(): ApolloLink {\n  return setContext(async (_, {headers}) => {\n    try {\n      if (await storage.exists(USER_KEY)) {\n      }\n      const value = storage.get(USER_KEY);\n      if (value) {\n        const user = JSON.parse(value) as User;\n        return {\n          headers: {\n            ...headers,\n            authorization: `Bearer ${user.bearerToken}`,\n          },\n        };\n      }\n    } catch (e) {\n      console.error(e);\n    }\n    return {\n      headers,\n    };\n  });\n}\n\nfunction subscriptionLink(): ApolloLink {\n  const wsForNode = typeof window === 'undefined' ? ws : null;\n  const wsClient = new SubscriptionClient(\n    envs.get('GUIDED_WEBSOCKET'),\n    {\n      reconnect: true,\n    },\n    wsForNode,\n  );\n\n  return new WebSocketLink(wsClient);\n}\n\nif (!envs.exists('GUIDED_GRAPHQL')) {\n  throw new Error(`Requires GUIDED_GRAPHQL`);\n}\n\nif (!envs.exists('GUIDED_WEBSOCKET')) {\n  throw new Error(`Requires GUIDED_WEBSOCKET`);\n}\n\nconst defaultOptions: DefaultOptions = {\n  watchQuery: {\n    fetchPolicy: 'no-cache',\n    errorPolicy: 'all',\n  },\n  query: {\n    fetchPolicy: 'no-cache',\n    errorPolicy: 'all',\n  },\n};\n\nexport const subscriptionClient = new ApolloClient({\n  connectToDevTools: true,\n  //TODO can't send custom headers on websocket, so cant auth via postgraphile expected method\n  link: subscriptionLink(),\n  cache: new InMemoryCache(),\n  defaultOptions,\n});\n\nexport default new ApolloClient({\n  connectToDevTools: true,\n  link: authLink().concat(httpLink()),\n  cache: new InMemoryCache(),\n  defaultOptions,\n});\n"]},"metadata":{},"sourceType":"module"}