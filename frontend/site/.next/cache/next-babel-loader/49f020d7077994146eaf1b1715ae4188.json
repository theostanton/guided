{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\n\nvar _dec,\n    _class,\n    _jsxFileName = \"/Users/theo/Code/guided/frontend/site/src/components/Profile/index.tsx\";\n\nvar __jsx = React.createElement;\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React from 'react';\nimport StyleSheet from \"react-native-web/dist/cjs/exports/StyleSheet\";\nimport View from \"react-native-web/dist/cjs/exports/View\";\nimport { inject } from 'mobx-react';\nimport LabelledText from '../LabelledText';\nvar Profile = (_dec = inject('authStore'), _dec(_class = /*#__PURE__*/function (_React$Component) {\n  _inherits(Profile, _React$Component);\n\n  var _super = _createSuper(Profile);\n\n  function Profile() {\n    _classCallCheck(this, Profile);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(Profile, [{\n    key: \"render\",\n    value: function render() {\n      var user = this.props.authStore.user;\n      console.log('user', user);\n\n      if (user) {\n        return __jsx(View, {\n          style: styles.root,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 19,\n            columnNumber: 9\n          }\n        }, __jsx(LabelledText, {\n          label: 'Email',\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 20,\n            columnNumber: 11\n          }\n        }, user.email), __jsx(LabelledText, {\n          label: 'Username',\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 21,\n            columnNumber: 11\n          }\n        }, user.username), __jsx(LabelledText, {\n          label: 'Token',\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 22,\n            columnNumber: 11\n          }\n        }, user.bearerToken));\n      } else {\n        return __jsx(View, {\n          style: styles.root,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 27,\n            columnNumber: 9\n          }\n        }, __jsx(LabelledText, {\n          label: 'User',\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 28,\n            columnNumber: 11\n          }\n        }, \"None\"));\n      }\n    }\n  }]);\n\n  return Profile;\n}(React.Component)) || _class);\nexport { Profile as default };\nvar styles = StyleSheet.create({\n  root: {\n    maxWidth: 400,\n    width: '100%',\n    alignSelf: 'center',\n    flexDirection: 'column'\n  },\n  textInput: {},\n  button: {}\n});","map":{"version":3,"sources":["/Users/theo/Code/guided/frontend/site/src/components/Profile/index.tsx"],"names":["React","inject","LabelledText","Profile","user","props","authStore","console","log","styles","root","email","username","bearerToken","Component","StyleSheet","create","maxWidth","width","alignSelf","flexDirection","textInput","button"],"mappings":";;;;;;;;;;;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;;;AAGA,SAAQC,MAAR,QAAqB,YAArB;AAEA,OAAOC,YAAP,MAAyB,iBAAzB;IAOqBC,O,WADpBF,MAAM,CAAC,WAAD,C;;;;;;;;;;;;;6BAEI;AACP,UAAMG,IAAI,GAAG,KAAKC,KAAL,CAAWC,SAAX,CAAqBF,IAAlC;AACAG,MAAAA,OAAO,CAACC,GAAR,CAAY,MAAZ,EAAoBJ,IAApB;;AACA,UAAIA,IAAJ,EAAU;AACR,eACE,MAAC,IAAD;AAAM,UAAA,KAAK,EAAEK,MAAM,CAACC,IAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACE,MAAC,YAAD;AAAc,UAAA,KAAK,EAAE,OAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAA+BN,IAAI,CAACO,KAApC,CADF,EAEE,MAAC,YAAD;AAAc,UAAA,KAAK,EAAE,UAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAAkCP,IAAI,CAACQ,QAAvC,CAFF,EAGE,MAAC,YAAD;AAAc,UAAA,KAAK,EAAE,OAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAA+BR,IAAI,CAACS,WAApC,CAHF,CADF;AAOD,OARD,MAQO;AACL,eACE,MAAC,IAAD;AAAM,UAAA,KAAK,EAAEJ,MAAM,CAACC,IAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACE,MAAC,YAAD;AAAc,UAAA,KAAK,EAAE,MAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBADF,CADF;AAKD;AACF;;;;EAnBkCV,KAAK,CAACc,S;SAAtBX,O;AAsBrB,IAAMM,MAAM,GAAGM,UAAU,CAACC,MAAX,CAAkB;AAC/BN,EAAAA,IAAI,EAAE;AACJO,IAAAA,QAAQ,EAAE,GADN;AAEJC,IAAAA,KAAK,EAAE,MAFH;AAGJC,IAAAA,SAAS,EAAE,QAHP;AAIJC,IAAAA,aAAa,EAAE;AAJX,GADyB;AAO/BC,EAAAA,SAAS,EAAE,EAPoB;AAQ/BC,EAAAA,MAAM,EAAE;AARuB,CAAlB,CAAf","sourcesContent":["import React from 'react';\nimport {Button, StyleSheet, Text, View} from 'react-native';\nimport AuthStore from 'stores/AuthStore';\nimport {inject} from 'mobx-react';\nimport LabelledTextInput from 'components/LabelledTextInput';\nimport LabelledText from '../LabelledText';\n\ntype Props = {\n  authStore?: AuthStore;\n};\n\n@inject('authStore')\nexport default class Profile extends React.Component<Props> {\n  render() {\n    const user = this.props.authStore.user;\n    console.log('user', user);\n    if (user) {\n      return (\n        <View style={styles.root}>\n          <LabelledText label={'Email'}>{user.email}</LabelledText>\n          <LabelledText label={'Username'}>{user.username}</LabelledText>\n          <LabelledText label={'Token'}>{user.bearerToken}</LabelledText>\n        </View>\n      );\n    } else {\n      return (\n        <View style={styles.root}>\n          <LabelledText label={'User'}>None</LabelledText>\n        </View>\n      );\n    }\n  }\n}\n\nconst styles = StyleSheet.create({\n  root: {\n    maxWidth: 400,\n    width: '100%',\n    alignSelf: 'center',\n    flexDirection: 'column',\n  },\n  textInput: {},\n  button: {},\n});\n"]},"metadata":{},"sourceType":"module"}