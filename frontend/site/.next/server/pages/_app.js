module.exports =
/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = require('../ssr-module-cache.js');
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		var threw = true;
/******/ 		try {
/******/ 			modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/ 			threw = false;
/******/ 		} finally {
/******/ 			if(threw) delete installedModules[moduleId];
/******/ 		}
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 0);
/******/ })
/************************************************************************/
/******/ ({

/***/ "./src/api/client.ts":
/*!***************************!*\
  !*** ./src/api/client.ts ***!
  \***************************/
/*! exports provided: USER_KEY, subscriptionClient, default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"USER_KEY\", function() { return USER_KEY; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"subscriptionClient\", function() { return subscriptionClient; });\n/* harmony import */ var apollo_boost__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! apollo-boost */ \"apollo-boost\");\n/* harmony import */ var apollo_boost__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(apollo_boost__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var apollo_link_context__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! apollo-link-context */ \"apollo-link-context\");\n/* harmony import */ var apollo_link_context__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(apollo_link_context__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var node_fetch__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! node-fetch */ \"node-fetch\");\n/* harmony import */ var node_fetch__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(node_fetch__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var subscriptions_transport_ws__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! subscriptions-transport-ws */ \"subscriptions-transport-ws\");\n/* harmony import */ var subscriptions_transport_ws__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(subscriptions_transport_ws__WEBPACK_IMPORTED_MODULE_3__);\n/* harmony import */ var ws__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ws */ \"ws\");\n/* harmony import */ var ws__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(ws__WEBPACK_IMPORTED_MODULE_4__);\n/* harmony import */ var apollo_link_ws__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! apollo-link-ws */ \"apollo-link-ws\");\n/* harmony import */ var apollo_link_ws__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(apollo_link_ws__WEBPACK_IMPORTED_MODULE_5__);\n/* harmony import */ var utils_storage__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! utils/storage */ \"./src/utils/storage.ts\");\n/* harmony import */ var utils_envs__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! utils/envs */ \"./src/utils/envs.ts\");\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n\n\n\n\n\n\n\n\nconst USER_KEY = 'guidedUser';\n\nfunction httpLink() {\n  return new apollo_boost__WEBPACK_IMPORTED_MODULE_0__[\"HttpLink\"]({\n    uri: utils_envs__WEBPACK_IMPORTED_MODULE_7__[\"get\"]('GUIDED_GRAPHQL'),\n    // @ts-ignore\n    fetch: node_fetch__WEBPACK_IMPORTED_MODULE_2___default.a\n  });\n}\n\nfunction authLink() {\n  return Object(apollo_link_context__WEBPACK_IMPORTED_MODULE_1__[\"setContext\"])(async (_, {\n    headers\n  }) => {\n    try {\n      const user = await utils_storage__WEBPACK_IMPORTED_MODULE_6__[\"getObject\"](USER_KEY);\n\n      if (user !== null) {\n        return {\n          headers: _objectSpread(_objectSpread({}, headers), {}, {\n            authorization: `Bearer ${user.bearerToken}`\n          })\n        };\n      }\n    } catch (e) {\n      console.error(e);\n    }\n\n    return {\n      headers\n    };\n  });\n}\n\nfunction subscriptionLink() {\n  const wsForNode = true ? ws__WEBPACK_IMPORTED_MODULE_4___default.a : undefined;\n  const wsClient = new subscriptions_transport_ws__WEBPACK_IMPORTED_MODULE_3__[\"SubscriptionClient\"](utils_envs__WEBPACK_IMPORTED_MODULE_7__[\"get\"]('GUIDED_WEBSOCKET'), {\n    reconnect: true\n  }, wsForNode);\n  return new apollo_link_ws__WEBPACK_IMPORTED_MODULE_5__[\"WebSocketLink\"](wsClient);\n}\n\nif (!utils_envs__WEBPACK_IMPORTED_MODULE_7__[\"exists\"]('GUIDED_GRAPHQL')) {\n  throw new Error(`Requires GUIDED_GRAPHQL`);\n}\n\nif (!utils_envs__WEBPACK_IMPORTED_MODULE_7__[\"exists\"]('GUIDED_WEBSOCKET')) {\n  throw new Error(`Requires GUIDED_WEBSOCKET`);\n}\n\nconst defaultOptions = {\n  watchQuery: {\n    fetchPolicy: 'no-cache',\n    errorPolicy: 'all'\n  },\n  query: {\n    fetchPolicy: 'no-cache',\n    errorPolicy: 'all'\n  }\n};\nconst subscriptionClient = new apollo_boost__WEBPACK_IMPORTED_MODULE_0__[\"ApolloClient\"]({\n  connectToDevTools: true,\n  //TODO can't send custom headers on websocket, so cant auth via postgraphile expected method\n  link: subscriptionLink(),\n  cache: new apollo_boost__WEBPACK_IMPORTED_MODULE_0__[\"InMemoryCache\"](),\n  defaultOptions\n});\n/* harmony default export */ __webpack_exports__[\"default\"] = (new apollo_boost__WEBPACK_IMPORTED_MODULE_0__[\"ApolloClient\"]({\n  connectToDevTools: true,\n  link: authLink().concat(httpLink()),\n  cache: new apollo_boost__WEBPACK_IMPORTED_MODULE_0__[\"InMemoryCache\"](),\n  defaultOptions\n}));//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvYXBpL2NsaWVudC50cz81ZDg1Il0sIm5hbWVzIjpbIlVTRVJfS0VZIiwiaHR0cExpbmsiLCJIdHRwTGluayIsInVyaSIsImVudnMiLCJmZXRjaCIsImF1dGhMaW5rIiwic2V0Q29udGV4dCIsIl8iLCJoZWFkZXJzIiwidXNlciIsInN0b3JhZ2UiLCJhdXRob3JpemF0aW9uIiwiYmVhcmVyVG9rZW4iLCJlIiwiY29uc29sZSIsImVycm9yIiwic3Vic2NyaXB0aW9uTGluayIsIndzRm9yTm9kZSIsIndzIiwid3NDbGllbnQiLCJTdWJzY3JpcHRpb25DbGllbnQiLCJyZWNvbm5lY3QiLCJXZWJTb2NrZXRMaW5rIiwiRXJyb3IiLCJkZWZhdWx0T3B0aW9ucyIsIndhdGNoUXVlcnkiLCJmZXRjaFBvbGljeSIsImVycm9yUG9saWN5IiwicXVlcnkiLCJzdWJzY3JpcHRpb25DbGllbnQiLCJBcG9sbG9DbGllbnQiLCJjb25uZWN0VG9EZXZUb29scyIsImxpbmsiLCJjYWNoZSIsIkluTWVtb3J5Q2FjaGUiLCJjb25jYXQiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUE7QUFRQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUVPLE1BQU1BLFFBQVEsR0FBRyxZQUFqQjs7QUFFUCxTQUFTQyxRQUFULEdBQWdDO0FBQzlCLFNBQU8sSUFBSUMscURBQUosQ0FBYTtBQUNsQkMsT0FBRyxFQUFFQyw4Q0FBQSxDQUFTLGdCQUFULENBRGE7QUFFbEI7QUFDQUMsU0FBSyxFQUFFQSxpREFBS0E7QUFITSxHQUFiLENBQVA7QUFLRDs7QUFFRCxTQUFTQyxRQUFULEdBQWdDO0FBQzlCLFNBQU9DLHNFQUFVLENBQUMsT0FBT0MsQ0FBUCxFQUFVO0FBQUNDO0FBQUQsR0FBVixLQUF3QjtBQUN4QyxRQUFJO0FBQ0YsWUFBTUMsSUFBSSxHQUFHLE1BQU1DLHVEQUFBLENBQXdCWCxRQUF4QixDQUFuQjs7QUFDQSxVQUFJVSxJQUFJLEtBQUssSUFBYixFQUFtQjtBQUNqQixlQUFPO0FBQ0xELGlCQUFPLGtDQUNGQSxPQURFO0FBRUxHLHlCQUFhLEVBQUcsVUFBU0YsSUFBSSxDQUFDRyxXQUFZO0FBRnJDO0FBREYsU0FBUDtBQU1EO0FBQ0YsS0FWRCxDQVVFLE9BQU9DLENBQVAsRUFBVTtBQUNWQyxhQUFPLENBQUNDLEtBQVIsQ0FBY0YsQ0FBZDtBQUNEOztBQUNELFdBQU87QUFDTEw7QUFESyxLQUFQO0FBR0QsR0FqQmdCLENBQWpCO0FBa0JEOztBQUVELFNBQVNRLGdCQUFULEdBQXdDO0FBQ3RDLFFBQU1DLFNBQVMsR0FBRyxPQUFnQ0MseUNBQWhDLEdBQXFDLFNBQXZEO0FBQ0EsUUFBTUMsUUFBUSxHQUFHLElBQUlDLDZFQUFKLENBQ2ZqQiw4Q0FBQSxDQUFTLGtCQUFULENBRGUsRUFFZjtBQUNFa0IsYUFBUyxFQUFFO0FBRGIsR0FGZSxFQUtmSixTQUxlLENBQWpCO0FBUUEsU0FBTyxJQUFJSyw0REFBSixDQUFrQkgsUUFBbEIsQ0FBUDtBQUNEOztBQUVELElBQUksQ0FBQ2hCLGlEQUFBLENBQVksZ0JBQVosQ0FBTCxFQUFvQztBQUNsQyxRQUFNLElBQUlvQixLQUFKLENBQVcseUJBQVgsQ0FBTjtBQUNEOztBQUVELElBQUksQ0FBQ3BCLGlEQUFBLENBQVksa0JBQVosQ0FBTCxFQUFzQztBQUNwQyxRQUFNLElBQUlvQixLQUFKLENBQVcsMkJBQVgsQ0FBTjtBQUNEOztBQUVELE1BQU1DLGNBQThCLEdBQUc7QUFDckNDLFlBQVUsRUFBRTtBQUNWQyxlQUFXLEVBQUUsVUFESDtBQUVWQyxlQUFXLEVBQUU7QUFGSCxHQUR5QjtBQUtyQ0MsT0FBSyxFQUFFO0FBQ0xGLGVBQVcsRUFBRSxVQURSO0FBRUxDLGVBQVcsRUFBRTtBQUZSO0FBTDhCLENBQXZDO0FBV08sTUFBTUUsa0JBQWtCLEdBQUcsSUFBSUMseURBQUosQ0FBaUI7QUFDakRDLG1CQUFpQixFQUFFLElBRDhCO0FBRWpEO0FBQ0FDLE1BQUksRUFBRWhCLGdCQUFnQixFQUgyQjtBQUlqRGlCLE9BQUssRUFBRSxJQUFJQywwREFBSixFQUowQztBQUtqRFY7QUFMaUQsQ0FBakIsQ0FBM0I7QUFRUSxtRUFBSU0seURBQUosQ0FBaUI7QUFDOUJDLG1CQUFpQixFQUFFLElBRFc7QUFFOUJDLE1BQUksRUFBRTNCLFFBQVEsR0FBRzhCLE1BQVgsQ0FBa0JuQyxRQUFRLEVBQTFCLENBRndCO0FBRzlCaUMsT0FBSyxFQUFFLElBQUlDLDBEQUFKLEVBSHVCO0FBSTlCVjtBQUo4QixDQUFqQixDQUFmIiwiZmlsZSI6Ii4vc3JjL2FwaS9jbGllbnQudHMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xuICBBcG9sbG9DbGllbnQsXG4gIEFwb2xsb0xpbmssXG4gIERlZmF1bHRPcHRpb25zLFxuICBIdHRwTGluayxcbiAgSW5NZW1vcnlDYWNoZSxcbn0gZnJvbSAnYXBvbGxvLWJvb3N0JztcblxuaW1wb3J0IHtzZXRDb250ZXh0fSBmcm9tICdhcG9sbG8tbGluay1jb250ZXh0JztcbmltcG9ydCBmZXRjaCBmcm9tICdub2RlLWZldGNoJztcbmltcG9ydCB7U3Vic2NyaXB0aW9uQ2xpZW50fSBmcm9tICdzdWJzY3JpcHRpb25zLXRyYW5zcG9ydC13cyc7XG5pbXBvcnQgd3MgZnJvbSAnd3MnO1xuaW1wb3J0IHtXZWJTb2NrZXRMaW5rfSBmcm9tICdhcG9sbG8tbGluay13cyc7XG5pbXBvcnQge1VzZXJ9IGZyb20gJ3N0b3Jlcy9BdXRoU3RvcmUnO1xuaW1wb3J0ICogYXMgc3RvcmFnZSBmcm9tICd1dGlscy9zdG9yYWdlJztcbmltcG9ydCAqIGFzIGVudnMgZnJvbSAndXRpbHMvZW52cyc7XG5cbmV4cG9ydCBjb25zdCBVU0VSX0tFWSA9ICdndWlkZWRVc2VyJztcblxuZnVuY3Rpb24gaHR0cExpbmsoKTogQXBvbGxvTGluayB7XG4gIHJldHVybiBuZXcgSHR0cExpbmsoe1xuICAgIHVyaTogZW52cy5nZXQoJ0dVSURFRF9HUkFQSFFMJyksXG4gICAgLy8gQHRzLWlnbm9yZVxuICAgIGZldGNoOiBmZXRjaCxcbiAgfSk7XG59XG5cbmZ1bmN0aW9uIGF1dGhMaW5rKCk6IEFwb2xsb0xpbmsge1xuICByZXR1cm4gc2V0Q29udGV4dChhc3luYyAoXywge2hlYWRlcnN9KSA9PiB7XG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IHVzZXIgPSBhd2FpdCBzdG9yYWdlLmdldE9iamVjdDxVc2VyPihVU0VSX0tFWSk7XG4gICAgICBpZiAodXNlciAhPT0gbnVsbCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIGhlYWRlcnM6IHtcbiAgICAgICAgICAgIC4uLmhlYWRlcnMsXG4gICAgICAgICAgICBhdXRob3JpemF0aW9uOiBgQmVhcmVyICR7dXNlci5iZWFyZXJUb2tlbn1gLFxuICAgICAgICAgIH0sXG4gICAgICAgIH07XG4gICAgICB9XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgY29uc29sZS5lcnJvcihlKTtcbiAgICB9XG4gICAgcmV0dXJuIHtcbiAgICAgIGhlYWRlcnMsXG4gICAgfTtcbiAgfSk7XG59XG5cbmZ1bmN0aW9uIHN1YnNjcmlwdGlvbkxpbmsoKTogQXBvbGxvTGluayB7XG4gIGNvbnN0IHdzRm9yTm9kZSA9IHR5cGVvZiB3aW5kb3cgPT09ICd1bmRlZmluZWQnID8gd3MgOiBudWxsO1xuICBjb25zdCB3c0NsaWVudCA9IG5ldyBTdWJzY3JpcHRpb25DbGllbnQoXG4gICAgZW52cy5nZXQoJ0dVSURFRF9XRUJTT0NLRVQnKSxcbiAgICB7XG4gICAgICByZWNvbm5lY3Q6IHRydWUsXG4gICAgfSxcbiAgICB3c0Zvck5vZGUsXG4gICk7XG5cbiAgcmV0dXJuIG5ldyBXZWJTb2NrZXRMaW5rKHdzQ2xpZW50KTtcbn1cblxuaWYgKCFlbnZzLmV4aXN0cygnR1VJREVEX0dSQVBIUUwnKSkge1xuICB0aHJvdyBuZXcgRXJyb3IoYFJlcXVpcmVzIEdVSURFRF9HUkFQSFFMYCk7XG59XG5cbmlmICghZW52cy5leGlzdHMoJ0dVSURFRF9XRUJTT0NLRVQnKSkge1xuICB0aHJvdyBuZXcgRXJyb3IoYFJlcXVpcmVzIEdVSURFRF9XRUJTT0NLRVRgKTtcbn1cblxuY29uc3QgZGVmYXVsdE9wdGlvbnM6IERlZmF1bHRPcHRpb25zID0ge1xuICB3YXRjaFF1ZXJ5OiB7XG4gICAgZmV0Y2hQb2xpY3k6ICduby1jYWNoZScsXG4gICAgZXJyb3JQb2xpY3k6ICdhbGwnLFxuICB9LFxuICBxdWVyeToge1xuICAgIGZldGNoUG9saWN5OiAnbm8tY2FjaGUnLFxuICAgIGVycm9yUG9saWN5OiAnYWxsJyxcbiAgfSxcbn07XG5cbmV4cG9ydCBjb25zdCBzdWJzY3JpcHRpb25DbGllbnQgPSBuZXcgQXBvbGxvQ2xpZW50KHtcbiAgY29ubmVjdFRvRGV2VG9vbHM6IHRydWUsXG4gIC8vVE9ETyBjYW4ndCBzZW5kIGN1c3RvbSBoZWFkZXJzIG9uIHdlYnNvY2tldCwgc28gY2FudCBhdXRoIHZpYSBwb3N0Z3JhcGhpbGUgZXhwZWN0ZWQgbWV0aG9kXG4gIGxpbms6IHN1YnNjcmlwdGlvbkxpbmsoKSxcbiAgY2FjaGU6IG5ldyBJbk1lbW9yeUNhY2hlKCksXG4gIGRlZmF1bHRPcHRpb25zLFxufSk7XG5cbmV4cG9ydCBkZWZhdWx0IG5ldyBBcG9sbG9DbGllbnQoe1xuICBjb25uZWN0VG9EZXZUb29sczogdHJ1ZSxcbiAgbGluazogYXV0aExpbmsoKS5jb25jYXQoaHR0cExpbmsoKSksXG4gIGNhY2hlOiBuZXcgSW5NZW1vcnlDYWNoZSgpLFxuICBkZWZhdWx0T3B0aW9ucyxcbn0pO1xuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./src/api/client.ts\n");

/***/ }),

/***/ "./src/api/generated.tsx":
/*!*******************************!*\
  !*** ./src/api/generated.tsx ***!
  \*******************************/
/*! exports provided: Colour, ComputationsOrderBy, ComputationStatus, FeedEventsOrderBy, FeedEventType, FollowingStatus, FollowsOrderBy, GuidesOrderBy, RidesOrderBy, RideStatus, SpotsOrderBy, StagesOrderBy, StageStatus, TemperaturesOrderBy, TransportType, UsersOrderBy, LoginDocument, LoginComponent, useLoginMutation, SignUpDocument, SignUpComponent, useSignUpMutation, GetUsernameDocument, GetUsernameComponent, useGetUsernameQuery, useGetUsernameLazyQuery */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Colour\", function() { return Colour; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ComputationsOrderBy\", function() { return ComputationsOrderBy; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ComputationStatus\", function() { return ComputationStatus; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"FeedEventsOrderBy\", function() { return FeedEventsOrderBy; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"FeedEventType\", function() { return FeedEventType; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"FollowingStatus\", function() { return FollowingStatus; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"FollowsOrderBy\", function() { return FollowsOrderBy; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"GuidesOrderBy\", function() { return GuidesOrderBy; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"RidesOrderBy\", function() { return RidesOrderBy; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"RideStatus\", function() { return RideStatus; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"SpotsOrderBy\", function() { return SpotsOrderBy; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"StagesOrderBy\", function() { return StagesOrderBy; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"StageStatus\", function() { return StageStatus; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"TemperaturesOrderBy\", function() { return TemperaturesOrderBy; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"TransportType\", function() { return TransportType; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"UsersOrderBy\", function() { return UsersOrderBy; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"LoginDocument\", function() { return LoginDocument; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"LoginComponent\", function() { return LoginComponent; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"useLoginMutation\", function() { return useLoginMutation; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"SignUpDocument\", function() { return SignUpDocument; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"SignUpComponent\", function() { return SignUpComponent; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"useSignUpMutation\", function() { return useSignUpMutation; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"GetUsernameDocument\", function() { return GetUsernameDocument; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"GetUsernameComponent\", function() { return GetUsernameComponent; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"useGetUsernameQuery\", function() { return useGetUsernameQuery; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"useGetUsernameLazyQuery\", function() { return useGetUsernameLazyQuery; });\n/* harmony import */ var graphql_tag__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! graphql-tag */ \"graphql-tag\");\n/* harmony import */ var graphql_tag__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(graphql_tag__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"react\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _apollo_react_components__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @apollo/react-components */ \"@apollo/react-components\");\n/* harmony import */ var _apollo_react_components__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_apollo_react_components__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var _apollo_react_hooks__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @apollo/react-hooks */ \"@apollo/react-hooks\");\n/* harmony import */ var _apollo_react_hooks__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(_apollo_react_hooks__WEBPACK_IMPORTED_MODULE_3__);\nvar _jsxFileName = \"/Users/theo/Code/guided/frontend/site/src/api/generated.tsx\";\nvar __jsx = react__WEBPACK_IMPORTED_MODULE_1__[\"createElement\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\n\n\n\n\nlet Colour;\n/** A filter to be used against Colour fields. All fields are combined with a logical ‘and.’ */\n\n(function (Colour) {\n  Colour[\"Red\"] = \"RED\";\n  Colour[\"Orange\"] = \"ORANGE\";\n  Colour[\"Yellow\"] = \"YELLOW\";\n  Colour[\"Olive\"] = \"OLIVE\";\n  Colour[\"Green\"] = \"GREEN\";\n  Colour[\"Teal\"] = \"TEAL\";\n  Colour[\"Blue\"] = \"BLUE\";\n  Colour[\"Violet\"] = \"VIOLET\";\n  Colour[\"Purple\"] = \"PURPLE\";\n  Colour[\"Pink\"] = \"PINK\";\n  Colour[\"Brown\"] = \"BROWN\";\n  Colour[\"Grey\"] = \"GREY\";\n  Colour[\"Black\"] = \"BLACK\";\n})(Colour || (Colour = {}));\n\n/** Methods to use when ordering `Computation`. */\nlet ComputationsOrderBy;\n\n(function (ComputationsOrderBy) {\n  ComputationsOrderBy[\"Natural\"] = \"NATURAL\";\n  ComputationsOrderBy[\"IdAsc\"] = \"ID_ASC\";\n  ComputationsOrderBy[\"IdDesc\"] = \"ID_DESC\";\n  ComputationsOrderBy[\"EndedAsc\"] = \"ENDED_ASC\";\n  ComputationsOrderBy[\"EndedDesc\"] = \"ENDED_DESC\";\n  ComputationsOrderBy[\"DurationAsc\"] = \"DURATION_ASC\";\n  ComputationsOrderBy[\"DurationDesc\"] = \"DURATION_DESC\";\n  ComputationsOrderBy[\"StatusAsc\"] = \"STATUS_ASC\";\n  ComputationsOrderBy[\"StatusDesc\"] = \"STATUS_DESC\";\n  ComputationsOrderBy[\"StageAsc\"] = \"STAGE_ASC\";\n  ComputationsOrderBy[\"StageDesc\"] = \"STAGE_DESC\";\n  ComputationsOrderBy[\"GuideAsc\"] = \"GUIDE_ASC\";\n  ComputationsOrderBy[\"GuideDesc\"] = \"GUIDE_DESC\";\n  ComputationsOrderBy[\"CreatedAsc\"] = \"CREATED_ASC\";\n  ComputationsOrderBy[\"CreatedDesc\"] = \"CREATED_DESC\";\n  ComputationsOrderBy[\"StartedAsc\"] = \"STARTED_ASC\";\n  ComputationsOrderBy[\"StartedDesc\"] = \"STARTED_DESC\";\n  ComputationsOrderBy[\"PrimaryKeyAsc\"] = \"PRIMARY_KEY_ASC\";\n  ComputationsOrderBy[\"PrimaryKeyDesc\"] = \"PRIMARY_KEY_DESC\";\n})(ComputationsOrderBy || (ComputationsOrderBy = {}));\n\nlet ComputationStatus;\n/** A filter to be used against ComputationStatus fields. All fields are combined with a logical ‘and.’ */\n\n(function (ComputationStatus) {\n  ComputationStatus[\"Scheduled\"] = \"SCHEDULED\";\n  ComputationStatus[\"Failed\"] = \"FAILED\";\n  ComputationStatus[\"Computing\"] = \"COMPUTING\";\n  ComputationStatus[\"Success\"] = \"SUCCESS\";\n})(ComputationStatus || (ComputationStatus = {}));\n\n/** Methods to use when ordering `FeedEvent`. */\nlet FeedEventsOrderBy;\n\n(function (FeedEventsOrderBy) {\n  FeedEventsOrderBy[\"Natural\"] = \"NATURAL\";\n  FeedEventsOrderBy[\"TimestampAsc\"] = \"TIMESTAMP_ASC\";\n  FeedEventsOrderBy[\"TimestampDesc\"] = \"TIMESTAMP_DESC\";\n  FeedEventsOrderBy[\"TypeAsc\"] = \"TYPE_ASC\";\n  FeedEventsOrderBy[\"TypeDesc\"] = \"TYPE_DESC\";\n  FeedEventsOrderBy[\"RideAsc\"] = \"RIDE_ASC\";\n  FeedEventsOrderBy[\"RideDesc\"] = \"RIDE_DESC\";\n  FeedEventsOrderBy[\"GuideAsc\"] = \"GUIDE_ASC\";\n  FeedEventsOrderBy[\"GuideDesc\"] = \"GUIDE_DESC\";\n  FeedEventsOrderBy[\"UserAsc\"] = \"USER_ASC\";\n  FeedEventsOrderBy[\"UserDesc\"] = \"USER_DESC\";\n  FeedEventsOrderBy[\"PrimaryKeyAsc\"] = \"PRIMARY_KEY_ASC\";\n  FeedEventsOrderBy[\"PrimaryKeyDesc\"] = \"PRIMARY_KEY_DESC\";\n})(FeedEventsOrderBy || (FeedEventsOrderBy = {}));\n\nlet FeedEventType;\n/** A filter to be used against FeedEventType fields. All fields are combined with a logical ‘and.’ */\n\n(function (FeedEventType) {\n  FeedEventType[\"NewGuide\"] = \"NEW_GUIDE\";\n  FeedEventType[\"NewFollows\"] = \"NEW_FOLLOWS\";\n  FeedEventType[\"SelfCreated\"] = \"SELF_CREATED\";\n})(FeedEventType || (FeedEventType = {}));\n\nlet FollowingStatus;\n/** A filter to be used against FollowingStatus fields. All fields are combined with a logical ‘and.’ */\n\n(function (FollowingStatus) {\n  FollowingStatus[\"Following\"] = \"FOLLOWING\";\n  FollowingStatus[\"IsSelf\"] = \"IS_SELF\";\n  FollowingStatus[\"NotFollowing\"] = \"NOT_FOLLOWING\";\n  FollowingStatus[\"Anonymous\"] = \"ANONYMOUS\";\n})(FollowingStatus || (FollowingStatus = {}));\n\n/** Methods to use when ordering `Follow`. */\nlet FollowsOrderBy;\n\n(function (FollowsOrderBy) {\n  FollowsOrderBy[\"Natural\"] = \"NATURAL\";\n  FollowsOrderBy[\"FollowedAsc\"] = \"FOLLOWED_ASC\";\n  FollowsOrderBy[\"FollowedDesc\"] = \"FOLLOWED_DESC\";\n  FollowsOrderBy[\"FollowerAsc\"] = \"FOLLOWER_ASC\";\n  FollowsOrderBy[\"FollowerDesc\"] = \"FOLLOWER_DESC\";\n  FollowsOrderBy[\"TimestampAsc\"] = \"TIMESTAMP_ASC\";\n  FollowsOrderBy[\"TimestampDesc\"] = \"TIMESTAMP_DESC\";\n})(FollowsOrderBy || (FollowsOrderBy = {}));\n\n/** Methods to use when ordering `Guide`. */\nlet GuidesOrderBy;\n/** A filter to be used against Int fields. All fields are combined with a logical ‘and.’ */\n\n(function (GuidesOrderBy) {\n  GuidesOrderBy[\"Natural\"] = \"NATURAL\";\n  GuidesOrderBy[\"IdAsc\"] = \"ID_ASC\";\n  GuidesOrderBy[\"IdDesc\"] = \"ID_DESC\";\n  GuidesOrderBy[\"TitleAsc\"] = \"TITLE_ASC\";\n  GuidesOrderBy[\"TitleDesc\"] = \"TITLE_DESC\";\n  GuidesOrderBy[\"SlugAsc\"] = \"SLUG_ASC\";\n  GuidesOrderBy[\"SlugDesc\"] = \"SLUG_DESC\";\n  GuidesOrderBy[\"OwnerAsc\"] = \"OWNER_ASC\";\n  GuidesOrderBy[\"OwnerDesc\"] = \"OWNER_DESC\";\n  GuidesOrderBy[\"StartDateAsc\"] = \"START_DATE_ASC\";\n  GuidesOrderBy[\"StartDateDesc\"] = \"START_DATE_DESC\";\n  GuidesOrderBy[\"IsCircularAsc\"] = \"IS_CIRCULAR_ASC\";\n  GuidesOrderBy[\"IsCircularDesc\"] = \"IS_CIRCULAR_DESC\";\n  GuidesOrderBy[\"TransportTypeAsc\"] = \"TRANSPORT_TYPE_ASC\";\n  GuidesOrderBy[\"TransportTypeDesc\"] = \"TRANSPORT_TYPE_DESC\";\n  GuidesOrderBy[\"MaxHoursPerRideAsc\"] = \"MAX_HOURS_PER_RIDE_ASC\";\n  GuidesOrderBy[\"MaxHoursPerRideDesc\"] = \"MAX_HOURS_PER_RIDE_DESC\";\n  GuidesOrderBy[\"CreatedAsc\"] = \"CREATED_ASC\";\n  GuidesOrderBy[\"CreatedDesc\"] = \"CREATED_DESC\";\n  GuidesOrderBy[\"UpdatedAsc\"] = \"UPDATED_ASC\";\n  GuidesOrderBy[\"UpdatedDesc\"] = \"UPDATED_DESC\";\n  GuidesOrderBy[\"PrimaryKeyAsc\"] = \"PRIMARY_KEY_ASC\";\n  GuidesOrderBy[\"PrimaryKeyDesc\"] = \"PRIMARY_KEY_DESC\";\n})(GuidesOrderBy || (GuidesOrderBy = {}));\n\n/** Methods to use when ordering `Ride`. */\nlet RidesOrderBy;\n\n(function (RidesOrderBy) {\n  RidesOrderBy[\"Natural\"] = \"NATURAL\";\n  RidesOrderBy[\"IdAsc\"] = \"ID_ASC\";\n  RidesOrderBy[\"IdDesc\"] = \"ID_DESC\";\n  RidesOrderBy[\"GuideAsc\"] = \"GUIDE_ASC\";\n  RidesOrderBy[\"GuideDesc\"] = \"GUIDE_DESC\";\n  RidesOrderBy[\"OwnerAsc\"] = \"OWNER_ASC\";\n  RidesOrderBy[\"OwnerDesc\"] = \"OWNER_DESC\";\n  RidesOrderBy[\"FromSpotAsc\"] = \"FROM_SPOT_ASC\";\n  RidesOrderBy[\"FromSpotDesc\"] = \"FROM_SPOT_DESC\";\n  RidesOrderBy[\"ToSpotAsc\"] = \"TO_SPOT_ASC\";\n  RidesOrderBy[\"ToSpotDesc\"] = \"TO_SPOT_DESC\";\n  RidesOrderBy[\"PathUrlAsc\"] = \"PATH_URL_ASC\";\n  RidesOrderBy[\"PathUrlDesc\"] = \"PATH_URL_DESC\";\n  RidesOrderBy[\"DurationSecondsAsc\"] = \"DURATION_SECONDS_ASC\";\n  RidesOrderBy[\"DurationSecondsDesc\"] = \"DURATION_SECONDS_DESC\";\n  RidesOrderBy[\"DistanceMetersAsc\"] = \"DISTANCE_METERS_ASC\";\n  RidesOrderBy[\"DistanceMetersDesc\"] = \"DISTANCE_METERS_DESC\";\n  RidesOrderBy[\"DateAsc\"] = \"DATE_ASC\";\n  RidesOrderBy[\"DateDesc\"] = \"DATE_DESC\";\n  RidesOrderBy[\"StageAsc\"] = \"STAGE_ASC\";\n  RidesOrderBy[\"StageDesc\"] = \"STAGE_DESC\";\n  RidesOrderBy[\"PositionAsc\"] = \"POSITION_ASC\";\n  RidesOrderBy[\"PositionDesc\"] = \"POSITION_DESC\";\n  RidesOrderBy[\"StatusAsc\"] = \"STATUS_ASC\";\n  RidesOrderBy[\"StatusDesc\"] = \"STATUS_DESC\";\n  RidesOrderBy[\"CreatedAsc\"] = \"CREATED_ASC\";\n  RidesOrderBy[\"CreatedDesc\"] = \"CREATED_DESC\";\n  RidesOrderBy[\"UpdatedAsc\"] = \"UPDATED_ASC\";\n  RidesOrderBy[\"UpdatedDesc\"] = \"UPDATED_DESC\";\n  RidesOrderBy[\"PrimaryKeyAsc\"] = \"PRIMARY_KEY_ASC\";\n  RidesOrderBy[\"PrimaryKeyDesc\"] = \"PRIMARY_KEY_DESC\";\n})(RidesOrderBy || (RidesOrderBy = {}));\n\nlet RideStatus;\n/** A filter to be used against RideStatus fields. All fields are combined with a logical ‘and.’ */\n\n(function (RideStatus) {\n  RideStatus[\"Complete\"] = \"COMPLETE\";\n  RideStatus[\"Ready\"] = \"READY\";\n  RideStatus[\"Stale\"] = \"STALE\";\n})(RideStatus || (RideStatus = {}));\n\n/** Methods to use when ordering `Spot`. */\nlet SpotsOrderBy;\n\n(function (SpotsOrderBy) {\n  SpotsOrderBy[\"Natural\"] = \"NATURAL\";\n  SpotsOrderBy[\"IdAsc\"] = \"ID_ASC\";\n  SpotsOrderBy[\"IdDesc\"] = \"ID_DESC\";\n  SpotsOrderBy[\"LabelAsc\"] = \"LABEL_ASC\";\n  SpotsOrderBy[\"LabelDesc\"] = \"LABEL_DESC\";\n  SpotsOrderBy[\"GuideAsc\"] = \"GUIDE_ASC\";\n  SpotsOrderBy[\"GuideDesc\"] = \"GUIDE_DESC\";\n  SpotsOrderBy[\"OwnerAsc\"] = \"OWNER_ASC\";\n  SpotsOrderBy[\"OwnerDesc\"] = \"OWNER_DESC\";\n  SpotsOrderBy[\"NightsAsc\"] = \"NIGHTS_ASC\";\n  SpotsOrderBy[\"NightsDesc\"] = \"NIGHTS_DESC\";\n  SpotsOrderBy[\"LockedAsc\"] = \"LOCKED_ASC\";\n  SpotsOrderBy[\"LockedDesc\"] = \"LOCKED_DESC\";\n  SpotsOrderBy[\"LatAsc\"] = \"LAT_ASC\";\n  SpotsOrderBy[\"LatDesc\"] = \"LAT_DESC\";\n  SpotsOrderBy[\"LongAsc\"] = \"LONG_ASC\";\n  SpotsOrderBy[\"LongDesc\"] = \"LONG_DESC\";\n  SpotsOrderBy[\"PositionAsc\"] = \"POSITION_ASC\";\n  SpotsOrderBy[\"PositionDesc\"] = \"POSITION_DESC\";\n  SpotsOrderBy[\"LocationAsc\"] = \"LOCATION_ASC\";\n  SpotsOrderBy[\"LocationDesc\"] = \"LOCATION_DESC\";\n  SpotsOrderBy[\"CountryAsc\"] = \"COUNTRY_ASC\";\n  SpotsOrderBy[\"CountryDesc\"] = \"COUNTRY_DESC\";\n  SpotsOrderBy[\"DateAsc\"] = \"DATE_ASC\";\n  SpotsOrderBy[\"DateDesc\"] = \"DATE_DESC\";\n  SpotsOrderBy[\"CreatedAsc\"] = \"CREATED_ASC\";\n  SpotsOrderBy[\"CreatedDesc\"] = \"CREATED_DESC\";\n  SpotsOrderBy[\"UpdatedAsc\"] = \"UPDATED_ASC\";\n  SpotsOrderBy[\"UpdatedDesc\"] = \"UPDATED_DESC\";\n  SpotsOrderBy[\"StageAsc\"] = \"STAGE_ASC\";\n  SpotsOrderBy[\"StageDesc\"] = \"STAGE_DESC\";\n  SpotsOrderBy[\"PrimaryKeyAsc\"] = \"PRIMARY_KEY_ASC\";\n  SpotsOrderBy[\"PrimaryKeyDesc\"] = \"PRIMARY_KEY_DESC\";\n})(SpotsOrderBy || (SpotsOrderBy = {}));\n\n/** Methods to use when ordering `Stage`. */\nlet StagesOrderBy;\n\n(function (StagesOrderBy) {\n  StagesOrderBy[\"Natural\"] = \"NATURAL\";\n  StagesOrderBy[\"IdAsc\"] = \"ID_ASC\";\n  StagesOrderBy[\"IdDesc\"] = \"ID_DESC\";\n  StagesOrderBy[\"GuideAsc\"] = \"GUIDE_ASC\";\n  StagesOrderBy[\"GuideDesc\"] = \"GUIDE_DESC\";\n  StagesOrderBy[\"FromSpotAsc\"] = \"FROM_SPOT_ASC\";\n  StagesOrderBy[\"FromSpotDesc\"] = \"FROM_SPOT_DESC\";\n  StagesOrderBy[\"ToSpotAsc\"] = \"TO_SPOT_ASC\";\n  StagesOrderBy[\"ToSpotDesc\"] = \"TO_SPOT_DESC\";\n  StagesOrderBy[\"CreatedAsc\"] = \"CREATED_ASC\";\n  StagesOrderBy[\"CreatedDesc\"] = \"CREATED_DESC\";\n  StagesOrderBy[\"UpdatedAsc\"] = \"UPDATED_ASC\";\n  StagesOrderBy[\"UpdatedDesc\"] = \"UPDATED_DESC\";\n  StagesOrderBy[\"StatusAsc\"] = \"STATUS_ASC\";\n  StagesOrderBy[\"StatusDesc\"] = \"STATUS_DESC\";\n  StagesOrderBy[\"PositionAsc\"] = \"POSITION_ASC\";\n  StagesOrderBy[\"PositionDesc\"] = \"POSITION_DESC\";\n  StagesOrderBy[\"PrimaryKeyAsc\"] = \"PRIMARY_KEY_ASC\";\n  StagesOrderBy[\"PrimaryKeyDesc\"] = \"PRIMARY_KEY_DESC\";\n})(StagesOrderBy || (StagesOrderBy = {}));\n\nlet StageStatus;\n/** A filter to be used against StageStatus fields. All fields are combined with a logical ‘and.’ */\n\n(function (StageStatus) {\n  StageStatus[\"Complete\"] = \"COMPLETE\";\n  StageStatus[\"Ready\"] = \"READY\";\n  StageStatus[\"Computing\"] = \"COMPUTING\";\n  StageStatus[\"Stale\"] = \"STALE\";\n})(StageStatus || (StageStatus = {}));\n\n/** Methods to use when ordering `Temperature`. */\nlet TemperaturesOrderBy;\n\n(function (TemperaturesOrderBy) {\n  TemperaturesOrderBy[\"Natural\"] = \"NATURAL\";\n  TemperaturesOrderBy[\"IdAsc\"] = \"ID_ASC\";\n  TemperaturesOrderBy[\"IdDesc\"] = \"ID_DESC\";\n  TemperaturesOrderBy[\"CountryAsc\"] = \"COUNTRY_ASC\";\n  TemperaturesOrderBy[\"CountryDesc\"] = \"COUNTRY_DESC\";\n  TemperaturesOrderBy[\"MonthAsc\"] = \"MONTH_ASC\";\n  TemperaturesOrderBy[\"MonthDesc\"] = \"MONTH_DESC\";\n  TemperaturesOrderBy[\"TemperatureAsc\"] = \"TEMPERATURE_ASC\";\n  TemperaturesOrderBy[\"TemperatureDesc\"] = \"TEMPERATURE_DESC\";\n  TemperaturesOrderBy[\"CreatedAsc\"] = \"CREATED_ASC\";\n  TemperaturesOrderBy[\"CreatedDesc\"] = \"CREATED_DESC\";\n  TemperaturesOrderBy[\"UpdatedAsc\"] = \"UPDATED_ASC\";\n  TemperaturesOrderBy[\"UpdatedDesc\"] = \"UPDATED_DESC\";\n  TemperaturesOrderBy[\"PrimaryKeyAsc\"] = \"PRIMARY_KEY_ASC\";\n  TemperaturesOrderBy[\"PrimaryKeyDesc\"] = \"PRIMARY_KEY_DESC\";\n})(TemperaturesOrderBy || (TemperaturesOrderBy = {}));\n\nlet TransportType;\n/** A filter to be used against TransportType fields. All fields are combined with a logical ‘and.’ */\n\n(function (TransportType) {\n  TransportType[\"Motorcycle\"] = \"MOTORCYCLE\";\n  TransportType[\"Bicycle\"] = \"BICYCLE\";\n  TransportType[\"Car\"] = \"CAR\";\n})(TransportType || (TransportType = {}));\n\n/** Methods to use when ordering `User`. */\nlet UsersOrderBy;\n\n(function (UsersOrderBy) {\n  UsersOrderBy[\"Natural\"] = \"NATURAL\";\n  UsersOrderBy[\"UsernameAsc\"] = \"USERNAME_ASC\";\n  UsersOrderBy[\"UsernameDesc\"] = \"USERNAME_DESC\";\n  UsersOrderBy[\"EmailAsc\"] = \"EMAIL_ASC\";\n  UsersOrderBy[\"EmailDesc\"] = \"EMAIL_DESC\";\n  UsersOrderBy[\"PasswordHashAsc\"] = \"PASSWORD_HASH_ASC\";\n  UsersOrderBy[\"PasswordHashDesc\"] = \"PASSWORD_HASH_DESC\";\n  UsersOrderBy[\"ColourAsc\"] = \"COLOUR_ASC\";\n  UsersOrderBy[\"ColourDesc\"] = \"COLOUR_DESC\";\n  UsersOrderBy[\"CreatedAsc\"] = \"CREATED_ASC\";\n  UsersOrderBy[\"CreatedDesc\"] = \"CREATED_DESC\";\n  UsersOrderBy[\"UpdatedAsc\"] = \"UPDATED_ASC\";\n  UsersOrderBy[\"UpdatedDesc\"] = \"UPDATED_DESC\";\n  UsersOrderBy[\"PrimaryKeyAsc\"] = \"PRIMARY_KEY_ASC\";\n  UsersOrderBy[\"PrimaryKeyDesc\"] = \"PRIMARY_KEY_DESC\";\n})(UsersOrderBy || (UsersOrderBy = {}));\n\nconst LoginDocument = graphql_tag__WEBPACK_IMPORTED_MODULE_0___default.a`\n    mutation Login($email: String!, $password: String!) {\n  authenticate(input: {email: $email, password: $password}) {\n    jwtToken\n  }\n}\n    `;\nconst LoginComponent = props => __jsx(_apollo_react_components__WEBPACK_IMPORTED_MODULE_2__[\"Mutation\"], _extends({\n  mutation: LoginDocument\n}, props, {\n  __self: undefined,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 4525,\n    columnNumber: 7\n  }\n}));\n/**\n * __useLoginMutation__\n *\n * To run a mutation, you first call `useLoginMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useLoginMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [loginMutation, { data, loading, error }] = useLoginMutation({\n *   variables: {\n *      email: // value for 'email'\n *      password: // value for 'password'\n *   },\n * });\n */\n\nfunction useLoginMutation(baseOptions) {\n  return _apollo_react_hooks__WEBPACK_IMPORTED_MODULE_3__[\"useMutation\"](LoginDocument, baseOptions);\n}\nconst SignUpDocument = graphql_tag__WEBPACK_IMPORTED_MODULE_0___default.a`\n    mutation SignUp($username: String!, $email: String!, $password: String!) {\n  register(input: {_email: $email, _username: $username, _password: $password}) {\n    user {\n      username\n    }\n  }\n}\n    `;\nconst SignUpComponent = props => __jsx(_apollo_react_components__WEBPACK_IMPORTED_MODULE_2__[\"Mutation\"], _extends({\n  mutation: SignUpDocument\n}, props, {\n  __self: undefined,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 4566,\n    columnNumber: 7\n  }\n}));\n/**\n * __useSignUpMutation__\n *\n * To run a mutation, you first call `useSignUpMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useSignUpMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [signUpMutation, { data, loading, error }] = useSignUpMutation({\n *   variables: {\n *      username: // value for 'username'\n *      email: // value for 'email'\n *      password: // value for 'password'\n *   },\n * });\n */\n\nfunction useSignUpMutation(baseOptions) {\n  return _apollo_react_hooks__WEBPACK_IMPORTED_MODULE_3__[\"useMutation\"](SignUpDocument, baseOptions);\n}\nconst GetUsernameDocument = graphql_tag__WEBPACK_IMPORTED_MODULE_0___default.a`\n    query GetUsername($email: String!) {\n  users(condition: {email: $email}) {\n    nodes {\n      username\n      colour\n    }\n  }\n}\n    `;\nconst GetUsernameComponent = props => __jsx(_apollo_react_components__WEBPACK_IMPORTED_MODULE_2__[\"Query\"], _extends({\n  query: GetUsernameDocument\n}, props, {\n  __self: undefined,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 4608,\n    columnNumber: 7\n  }\n}));\n/**\n * __useGetUsernameQuery__\n *\n * To run a query within a React component, call `useGetUsernameQuery` and pass it any options that fit your needs.\n * When your component renders, `useGetUsernameQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useGetUsernameQuery({\n *   variables: {\n *      email: // value for 'email'\n *   },\n * });\n */\n\nfunction useGetUsernameQuery(baseOptions) {\n  return _apollo_react_hooks__WEBPACK_IMPORTED_MODULE_3__[\"useQuery\"](GetUsernameDocument, baseOptions);\n}\nfunction useGetUsernameLazyQuery(baseOptions) {\n  return _apollo_react_hooks__WEBPACK_IMPORTED_MODULE_3__[\"useLazyQuery\"](GetUsernameDocument, baseOptions);\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/api/generated.tsx\n");

/***/ }),

/***/ "./src/pages/_app.tsx":
/*!****************************!*\
  !*** ./src/pages/_app.tsx ***!
  \****************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default\", function() { return App; });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"react\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var mobx_react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! mobx-react */ \"mobx-react\");\n/* harmony import */ var mobx_react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(mobx_react__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var stores_AuthStore__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! stores/AuthStore */ \"./src/stores/AuthStore/index.ts\");\nvar _jsxFileName = \"/Users/theo/Code/guided/frontend/site/src/pages/_app.tsx\";\n\nvar __jsx = react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\n\n\nconst authStore = new stores_AuthStore__WEBPACK_IMPORTED_MODULE_2__[\"default\"]();\nfunction App({\n  Component,\n  pageProps\n}) {\n  return __jsx(mobx_react__WEBPACK_IMPORTED_MODULE_1__[\"Provider\"], {\n    authStore: authStore,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 9,\n      columnNumber: 5\n    }\n  }, __jsx(Component, _extends({}, pageProps, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 10,\n      columnNumber: 7\n    }\n  })));\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvcGFnZXMvX2FwcC50c3g/ODU0OCJdLCJuYW1lcyI6WyJhdXRoU3RvcmUiLCJBdXRoU3RvcmUiLCJBcHAiLCJDb21wb25lbnQiLCJwYWdlUHJvcHMiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7QUFBQTtBQUNBO0FBR0EsTUFBTUEsU0FBUyxHQUFHLElBQUlDLHdEQUFKLEVBQWxCO0FBRWUsU0FBU0MsR0FBVCxDQUFhO0FBQUNDLFdBQUQ7QUFBWUM7QUFBWixDQUFiLEVBQXFDO0FBQ2xELFNBQ0UsTUFBQyxtREFBRDtBQUFVLGFBQVMsRUFBRUosU0FBckI7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSxLQUNFLE1BQUMsU0FBRCxlQUFlSSxTQUFmO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUEsS0FERixDQURGO0FBS0QiLCJmaWxlIjoiLi9zcmMvcGFnZXMvX2FwcC50c3guanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1Byb3ZpZGVyfSBmcm9tICdtb2J4LXJlYWN0JztcbmltcG9ydCBBdXRoU3RvcmUgZnJvbSAnc3RvcmVzL0F1dGhTdG9yZSc7XG5pbXBvcnQge0FwcFJlZ2lzdHJ5fSBmcm9tICdyZWFjdC1uYXRpdmUnO1xuXG5jb25zdCBhdXRoU3RvcmUgPSBuZXcgQXV0aFN0b3JlKCk7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIEFwcCh7Q29tcG9uZW50LCBwYWdlUHJvcHN9KSB7XG4gIHJldHVybiAoXG4gICAgPFByb3ZpZGVyIGF1dGhTdG9yZT17YXV0aFN0b3JlfT5cbiAgICAgIDxDb21wb25lbnQgey4uLnBhZ2VQcm9wc30gLz5cbiAgICA8L1Byb3ZpZGVyPlxuICApO1xufVxuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./src/pages/_app.tsx\n");

/***/ }),

/***/ "./src/stores/AuthStore/index.ts":
/*!***************************************!*\
  !*** ./src/stores/AuthStore/index.ts ***!
  \***************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default\", function() { return AuthStore; });\n/* harmony import */ var mobx__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! mobx */ \"mobx\");\n/* harmony import */ var mobx__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(mobx__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var api_client__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! api/client */ \"./src/api/client.ts\");\n/* harmony import */ var utils_storage__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! utils/storage */ \"./src/utils/storage.ts\");\n/* harmony import */ var api_generated__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! api/generated */ \"./src/api/generated.tsx\");\n/* harmony import */ var stores_Store__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! stores/Store */ \"./src/stores/Store.ts\");\nvar _class, _descriptor, _temp;\n\nfunction _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }\n\nfunction _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }\n\nfunction _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'proposal-class-properties is enabled and runs after the decorators transform.'); }\n\n\n\n\n\n\nlet AuthStore = (_class = (_temp = class AuthStore extends stores_Store__WEBPACK_IMPORTED_MODULE_4__[\"Store\"] {\n  constructor() {\n    super();\n\n    _initializerDefineProperty(this, \"user\", _descriptor, this);\n\n    if (false) {}\n  }\n\n  hydrate(initialData) {}\n\n  get isLoggedIn() {\n    console.log('isLoggedIn this.user=', this.user);\n    return this.user !== undefined;\n  }\n\n  setUser(user) {\n    if (user) {\n      utils_storage__WEBPACK_IMPORTED_MODULE_2__[\"setObject\"](api_client__WEBPACK_IMPORTED_MODULE_1__[\"USER_KEY\"], user);\n    } else {\n      utils_storage__WEBPACK_IMPORTED_MODULE_2__[\"remove\"](api_client__WEBPACK_IMPORTED_MODULE_1__[\"USER_KEY\"]);\n    }\n\n    this.user = user;\n  }\n\n  async login(email, password) {\n    var _result$data$authenti;\n\n    const variables = {\n      email,\n      password\n    };\n    const result = await api_client__WEBPACK_IMPORTED_MODULE_1__[\"default\"].mutate({\n      mutation: api_generated__WEBPACK_IMPORTED_MODULE_3__[\"LoginDocument\"],\n      variables\n    });\n\n    if (result.errors && result.errors.length > 0) {\n      // logError('LoginMutation error');\n      result.errors.forEach(error => {// logError(error.message);\n      });\n      return {\n        success: false,\n        message: result.errors.map(error => {\n          return error.message;\n        }).join('\\n')\n      };\n    }\n\n    if (!((_result$data$authenti = result.data.authenticate) === null || _result$data$authenti === void 0 ? void 0 : _result$data$authenti.jwtToken)) {\n      return {\n        success: false,\n        message: 'Failed to login'\n      };\n    }\n\n    const bearerToken = result.data.authenticate.jwtToken;\n    this.setUser({\n      email,\n      bearerToken\n    });\n    const usernameResult = await api_client__WEBPACK_IMPORTED_MODULE_1__[\"default\"].query({\n      query: api_generated__WEBPACK_IMPORTED_MODULE_3__[\"GetUsernameDocument\"],\n      variables: {\n        email\n      }\n    });\n\n    if (usernameResult.errors && usernameResult.errors.length > 0) {\n      usernameResult.errors.forEach(error => {});\n      this.setUser(undefined);\n      return {\n        success: false,\n        message: result.errors.map(error => {\n          return error.message;\n        }).join('\\n')\n      };\n    }\n\n    const {\n      colour,\n      username\n    } = usernameResult.data.users.nodes[0];\n    this.setUser({\n      username,\n      email,\n      bearerToken\n    });\n    return {\n      success: true\n    };\n  }\n\n  async signUp(username, email, password) {\n    const variables = {\n      username,\n      email,\n      password\n    };\n    const result = await api_client__WEBPACK_IMPORTED_MODULE_1__[\"default\"].mutate({\n      mutation: api_generated__WEBPACK_IMPORTED_MODULE_3__[\"SignUpDocument\"],\n      variables\n    });\n\n    if (result.errors && result.errors.length > 0) {\n      return {\n        success: false,\n        message: result.errors.map(error => {\n          return error.message;\n        }).join('\\n')\n      };\n    }\n\n    return this.login(email, password);\n  }\n\n  logOut() {\n    this.setUser(undefined);\n    console.log('logOUt this.user=', this.user);\n  }\n\n}, _temp), (_descriptor = _applyDecoratedDescriptor(_class.prototype, \"user\", [mobx__WEBPACK_IMPORTED_MODULE_0__[\"observable\"]], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: null\n}), _applyDecoratedDescriptor(_class.prototype, \"isLoggedIn\", [mobx__WEBPACK_IMPORTED_MODULE_0__[\"computed\"]], Object.getOwnPropertyDescriptor(_class.prototype, \"isLoggedIn\"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, \"setUser\", [mobx__WEBPACK_IMPORTED_MODULE_0__[\"action\"]], Object.getOwnPropertyDescriptor(_class.prototype, \"setUser\"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, \"logOut\", [mobx__WEBPACK_IMPORTED_MODULE_0__[\"action\"]], Object.getOwnPropertyDescriptor(_class.prototype, \"logOut\"), _class.prototype)), _class);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/stores/AuthStore/index.ts\n");

/***/ }),

/***/ "./src/stores/Store.ts":
/*!*****************************!*\
  !*** ./src/stores/Store.ts ***!
  \*****************************/
/*! exports provided: Store */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Store\", function() { return Store; });\nclass Store {}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvc3RvcmVzL1N0b3JlLnRzPzBiMzkiXSwibmFtZXMiOlsiU3RvcmUiXSwibWFwcGluZ3MiOiJBQUFBO0FBQUE7QUFBTyxNQUFlQSxLQUFmLENBQXdCIiwiZmlsZSI6Ii4vc3JjL3N0b3Jlcy9TdG9yZS50cy5qcyIsInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBhYnN0cmFjdCBjbGFzcyBTdG9yZTxUPiB7XG4gIGFic3RyYWN0IGh5ZHJhdGUoaW5pdGlhbERhdGE6IFQgfCB1bmRlZmluZWQpO1xufVxuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./src/stores/Store.ts\n");

/***/ }),

/***/ "./src/utils/envs.ts":
/*!***************************!*\
  !*** ./src/utils/envs.ts ***!
  \***************************/
/*! exports provided: exists, get */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"exists\", function() { return exists; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"get\", function() { return get; });\n/* harmony import */ var react_native_web_dist_cjs_exports_Platform__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react-native-web/dist/cjs/exports/Platform */ \"react-native-web/dist/cjs/exports/Platform\");\n/* harmony import */ var react_native_web_dist_cjs_exports_Platform__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react_native_web_dist_cjs_exports_Platform__WEBPACK_IMPORTED_MODULE_0__);\n\nfunction exists(key) {\n  return true;\n}\nfunction get(key) {\n  switch (key) {\n    case 'GUIDED_GRAPHQL':\n      switch (react_native_web_dist_cjs_exports_Platform__WEBPACK_IMPORTED_MODULE_0___default.a.OS) {\n        case 'android':\n          return 'http://10.0.2.2:5000';\n\n        case 'web':\n          return 'http://localhost:5000';\n\n        default:\n          return undefined;\n      }\n\n    case 'GUIDED_WEBSOCKET':\n      switch (react_native_web_dist_cjs_exports_Platform__WEBPACK_IMPORTED_MODULE_0___default.a.OS) {\n        case 'android':\n          return 'ws://10.0.2.2:5000';\n\n        case 'web':\n          return 'ws://localhost:5000';\n\n        default:\n          return undefined;\n      }\n\n  }\n\n  throw new Error(`No env for key=${key}`);\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvdXRpbHMvZW52cy50cz9jNGNjIl0sIm5hbWVzIjpbImV4aXN0cyIsImtleSIsImdldCIsIlBsYXRmb3JtIiwiT1MiLCJ1bmRlZmluZWQiLCJFcnJvciJdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBSU8sU0FBU0EsTUFBVCxDQUFnQkMsR0FBaEIsRUFBMkM7QUFDaEQsU0FBTyxJQUFQO0FBQ0Q7QUFFTSxTQUFTQyxHQUFULENBQWFELEdBQWIsRUFBdUM7QUFDNUMsVUFBUUEsR0FBUjtBQUNFLFNBQUssZ0JBQUw7QUFDRSxjQUFRRSxpRkFBUSxDQUFDQyxFQUFqQjtBQUNFLGFBQUssU0FBTDtBQUNFLGlCQUFPLHNCQUFQOztBQUNGLGFBQUssS0FBTDtBQUNFLGlCQUFPLHVCQUFQOztBQUNGO0FBQ0UsaUJBQU9DLFNBQVA7QUFOSjs7QUFRRixTQUFLLGtCQUFMO0FBQ0UsY0FBUUYsaUZBQVEsQ0FBQ0MsRUFBakI7QUFDRSxhQUFLLFNBQUw7QUFDRSxpQkFBTyxvQkFBUDs7QUFDRixhQUFLLEtBQUw7QUFDRSxpQkFBTyxxQkFBUDs7QUFDRjtBQUNFLGlCQUFPQyxTQUFQO0FBTko7O0FBWEo7O0FBb0JBLFFBQU0sSUFBSUMsS0FBSixDQUFXLGtCQUFpQkwsR0FBSSxFQUFoQyxDQUFOO0FBQ0QiLCJmaWxlIjoiLi9zcmMvdXRpbHMvZW52cy50cy5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7UGxhdGZvcm19IGZyb20gJ3JlYWN0LW5hdGl2ZSc7XG5cbmV4cG9ydCB0eXBlIFZhcmlhYmxlS2V5ID0gJ0dVSURFRF9HUkFQSFFMJyB8ICdHVUlERURfV0VCU09DS0VUJztcblxuZXhwb3J0IGZ1bmN0aW9uIGV4aXN0cyhrZXk6IFZhcmlhYmxlS2V5KTogYm9vbGVhbiB7XG4gIHJldHVybiB0cnVlO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZ2V0KGtleTogVmFyaWFibGVLZXkpOiBzdHJpbmcge1xuICBzd2l0Y2ggKGtleSkge1xuICAgIGNhc2UgJ0dVSURFRF9HUkFQSFFMJzpcbiAgICAgIHN3aXRjaCAoUGxhdGZvcm0uT1MpIHtcbiAgICAgICAgY2FzZSAnYW5kcm9pZCc6XG4gICAgICAgICAgcmV0dXJuICdodHRwOi8vMTAuMC4yLjI6NTAwMCc7XG4gICAgICAgIGNhc2UgJ3dlYic6XG4gICAgICAgICAgcmV0dXJuICdodHRwOi8vbG9jYWxob3N0OjUwMDAnO1xuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgICB9XG4gICAgY2FzZSAnR1VJREVEX1dFQlNPQ0tFVCc6XG4gICAgICBzd2l0Y2ggKFBsYXRmb3JtLk9TKSB7XG4gICAgICAgIGNhc2UgJ2FuZHJvaWQnOlxuICAgICAgICAgIHJldHVybiAnd3M6Ly8xMC4wLjIuMjo1MDAwJztcbiAgICAgICAgY2FzZSAnd2ViJzpcbiAgICAgICAgICByZXR1cm4gJ3dzOi8vbG9jYWxob3N0OjUwMDAnO1xuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgICB9XG4gIH1cbiAgdGhyb3cgbmV3IEVycm9yKGBObyBlbnYgZm9yIGtleT0ke2tleX1gKTtcbn1cbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./src/utils/envs.ts\n");

/***/ }),

/***/ "./src/utils/storage.ts":
/*!******************************!*\
  !*** ./src/utils/storage.ts ***!
  \******************************/
/*! exports provided: exists, set, setObject, remove, get, getObject, clear */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"exists\", function() { return exists; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"set\", function() { return set; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"setObject\", function() { return setObject; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"remove\", function() { return remove; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"get\", function() { return get; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"getObject\", function() { return getObject; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"clear\", function() { return clear; });\n/* harmony import */ var _react_native_community_async_storage__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @react-native-community/async-storage */ \"@react-native-community/async-storage\");\n/* harmony import */ var _react_native_community_async_storage__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_react_native_community_async_storage__WEBPACK_IMPORTED_MODULE_0__);\n\nasync function exists(key) {\n  return (await _react_native_community_async_storage__WEBPACK_IMPORTED_MODULE_0___default.a.getItem(key)) !== undefined;\n}\nasync function set(key, value) {\n  return _react_native_community_async_storage__WEBPACK_IMPORTED_MODULE_0___default.a.setItem(key, value);\n}\nasync function setObject(key, value) {\n  const str = JSON.stringify(value, null, 4);\n  return _react_native_community_async_storage__WEBPACK_IMPORTED_MODULE_0___default.a.setItem(key, str);\n}\nasync function remove(key) {\n  return _react_native_community_async_storage__WEBPACK_IMPORTED_MODULE_0___default.a.removeItem(key);\n}\nasync function get(key) {\n  return _react_native_community_async_storage__WEBPACK_IMPORTED_MODULE_0___default.a.getItem(key);\n}\nasync function getObject(key) {\n  const value = await _react_native_community_async_storage__WEBPACK_IMPORTED_MODULE_0___default.a.getItem(key);\n\n  if (value === undefined) {\n    throw new Error(`No value for key=${key}`);\n  }\n\n  return JSON.parse(value);\n}\nasync function clear() {\n  return _react_native_community_async_storage__WEBPACK_IMPORTED_MODULE_0___default.a.clear();\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvdXRpbHMvc3RvcmFnZS50cz9iN2M3Il0sIm5hbWVzIjpbImV4aXN0cyIsImtleSIsIkFzeW5jU3RvcmFnZSIsImdldEl0ZW0iLCJ1bmRlZmluZWQiLCJzZXQiLCJ2YWx1ZSIsInNldEl0ZW0iLCJzZXRPYmplY3QiLCJzdHIiLCJKU09OIiwic3RyaW5naWZ5IiwicmVtb3ZlIiwicmVtb3ZlSXRlbSIsImdldCIsImdldE9iamVjdCIsIkVycm9yIiwicGFyc2UiLCJjbGVhciJdLCJtYXBwaW5ncyI6IkFBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUVPLGVBQWVBLE1BQWYsQ0FBc0JDLEdBQXRCLEVBQXFEO0FBQzFELFNBQU8sQ0FBQyxNQUFNQyw0RUFBWSxDQUFDQyxPQUFiLENBQXFCRixHQUFyQixDQUFQLE1BQXNDRyxTQUE3QztBQUNEO0FBRU0sZUFBZUMsR0FBZixDQUFtQkosR0FBbkIsRUFBZ0NLLEtBQWhDLEVBQStDO0FBQ3BELFNBQU9KLDRFQUFZLENBQUNLLE9BQWIsQ0FBcUJOLEdBQXJCLEVBQTBCSyxLQUExQixDQUFQO0FBQ0Q7QUFFTSxlQUFlRSxTQUFmLENBQXlCUCxHQUF6QixFQUFzQ0ssS0FBdEMsRUFBcUQ7QUFDMUQsUUFBTUcsR0FBRyxHQUFHQyxJQUFJLENBQUNDLFNBQUwsQ0FBZUwsS0FBZixFQUFzQixJQUF0QixFQUE0QixDQUE1QixDQUFaO0FBQ0EsU0FBT0osNEVBQVksQ0FBQ0ssT0FBYixDQUFxQk4sR0FBckIsRUFBMEJRLEdBQTFCLENBQVA7QUFDRDtBQUVNLGVBQWVHLE1BQWYsQ0FBc0JYLEdBQXRCLEVBQTJCO0FBQ2hDLFNBQU9DLDRFQUFZLENBQUNXLFVBQWIsQ0FBd0JaLEdBQXhCLENBQVA7QUFDRDtBQUVNLGVBQWVhLEdBQWYsQ0FBbUJiLEdBQW5CLEVBQXlDO0FBQzlDLFNBQU9DLDRFQUFZLENBQUNDLE9BQWIsQ0FBcUJGLEdBQXJCLENBQVA7QUFDRDtBQUVNLGVBQWVjLFNBQWYsQ0FBNEJkLEdBQTVCLEVBQTZDO0FBQ2xELFFBQU1LLEtBQUssR0FBRyxNQUFNSiw0RUFBWSxDQUFDQyxPQUFiLENBQXFCRixHQUFyQixDQUFwQjs7QUFDQSxNQUFJSyxLQUFLLEtBQUtGLFNBQWQsRUFBeUI7QUFDdkIsVUFBTSxJQUFJWSxLQUFKLENBQVcsb0JBQW1CZixHQUFJLEVBQWxDLENBQU47QUFDRDs7QUFDRCxTQUFPUyxJQUFJLENBQUNPLEtBQUwsQ0FBV1gsS0FBWCxDQUFQO0FBQ0Q7QUFFTSxlQUFlWSxLQUFmLEdBQXVCO0FBQzVCLFNBQU9oQiw0RUFBWSxDQUFDZ0IsS0FBYixFQUFQO0FBQ0QiLCJmaWxlIjoiLi9zcmMvdXRpbHMvc3RvcmFnZS50cy5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBBc3luY1N0b3JhZ2UgZnJvbSAnQHJlYWN0LW5hdGl2ZS1jb21tdW5pdHkvYXN5bmMtc3RvcmFnZSc7XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBleGlzdHMoa2V5OiBzdHJpbmcpOiBQcm9taXNlPGJvb2xlYW4+IHtcbiAgcmV0dXJuIChhd2FpdCBBc3luY1N0b3JhZ2UuZ2V0SXRlbShrZXkpKSAhPT0gdW5kZWZpbmVkO1xufVxuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gc2V0KGtleTogc3RyaW5nLCB2YWx1ZTogc3RyaW5nKSB7XG4gIHJldHVybiBBc3luY1N0b3JhZ2Uuc2V0SXRlbShrZXksIHZhbHVlKTtcbn1cblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIHNldE9iamVjdChrZXk6IHN0cmluZywgdmFsdWU6IG9iamVjdCkge1xuICBjb25zdCBzdHIgPSBKU09OLnN0cmluZ2lmeSh2YWx1ZSwgbnVsbCwgNCk7XG4gIHJldHVybiBBc3luY1N0b3JhZ2Uuc2V0SXRlbShrZXksIHN0cik7XG59XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiByZW1vdmUoa2V5KSB7XG4gIHJldHVybiBBc3luY1N0b3JhZ2UucmVtb3ZlSXRlbShrZXkpO1xufVxuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gZ2V0KGtleSk6IFByb21pc2U8c3RyaW5nPiB7XG4gIHJldHVybiBBc3luY1N0b3JhZ2UuZ2V0SXRlbShrZXkpO1xufVxuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gZ2V0T2JqZWN0PFQ+KGtleSk6IFByb21pc2U8VD4ge1xuICBjb25zdCB2YWx1ZSA9IGF3YWl0IEFzeW5jU3RvcmFnZS5nZXRJdGVtKGtleSk7XG4gIGlmICh2YWx1ZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKGBObyB2YWx1ZSBmb3Iga2V5PSR7a2V5fWApO1xuICB9XG4gIHJldHVybiBKU09OLnBhcnNlKHZhbHVlKSBhcyBUO1xufVxuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gY2xlYXIoKSB7XG4gIHJldHVybiBBc3luY1N0b3JhZ2UuY2xlYXIoKTtcbn1cbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./src/utils/storage.ts\n");

/***/ }),

/***/ 0:
/*!*****************************************!*\
  !*** multi private-next-pages/_app.tsx ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__(/*! private-next-pages/_app.tsx */"./src/pages/_app.tsx");


/***/ }),

/***/ "@apollo/react-components":
/*!*******************************************!*\
  !*** external "@apollo/react-components" ***!
  \*******************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("module.exports = require(\"@apollo/react-components\");//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vZXh0ZXJuYWwgXCJAYXBvbGxvL3JlYWN0LWNvbXBvbmVudHNcIj82MWU1Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBIiwiZmlsZSI6IkBhcG9sbG8vcmVhY3QtY29tcG9uZW50cy5qcyIsInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcIkBhcG9sbG8vcmVhY3QtY29tcG9uZW50c1wiKTsiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///@apollo/react-components\n");

/***/ }),

/***/ "@apollo/react-hooks":
/*!**************************************!*\
  !*** external "@apollo/react-hooks" ***!
  \**************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("module.exports = require(\"@apollo/react-hooks\");//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vZXh0ZXJuYWwgXCJAYXBvbGxvL3JlYWN0LWhvb2tzXCI/NWE5MiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSIsImZpbGUiOiJAYXBvbGxvL3JlYWN0LWhvb2tzLmpzIiwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwiQGFwb2xsby9yZWFjdC1ob29rc1wiKTsiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///@apollo/react-hooks\n");

/***/ }),

/***/ "@react-native-community/async-storage":
/*!********************************************************!*\
  !*** external "@react-native-community/async-storage" ***!
  \********************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("module.exports = require(\"@react-native-community/async-storage\");//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vZXh0ZXJuYWwgXCJAcmVhY3QtbmF0aXZlLWNvbW11bml0eS9hc3luYy1zdG9yYWdlXCI/OTI0YiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSIsImZpbGUiOiJAcmVhY3QtbmF0aXZlLWNvbW11bml0eS9hc3luYy1zdG9yYWdlLmpzIiwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwiQHJlYWN0LW5hdGl2ZS1jb21tdW5pdHkvYXN5bmMtc3RvcmFnZVwiKTsiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///@react-native-community/async-storage\n");

/***/ }),

/***/ "apollo-boost":
/*!*******************************!*\
  !*** external "apollo-boost" ***!
  \*******************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("module.exports = require(\"apollo-boost\");//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vZXh0ZXJuYWwgXCJhcG9sbG8tYm9vc3RcIj8wNTlmIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBIiwiZmlsZSI6ImFwb2xsby1ib29zdC5qcyIsInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcImFwb2xsby1ib29zdFwiKTsiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///apollo-boost\n");

/***/ }),

/***/ "apollo-link-context":
/*!**************************************!*\
  !*** external "apollo-link-context" ***!
  \**************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("module.exports = require(\"apollo-link-context\");//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vZXh0ZXJuYWwgXCJhcG9sbG8tbGluay1jb250ZXh0XCI/YmQ1MCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSIsImZpbGUiOiJhcG9sbG8tbGluay1jb250ZXh0LmpzIiwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwiYXBvbGxvLWxpbmstY29udGV4dFwiKTsiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///apollo-link-context\n");

/***/ }),

/***/ "apollo-link-ws":
/*!*********************************!*\
  !*** external "apollo-link-ws" ***!
  \*********************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("module.exports = require(\"apollo-link-ws\");//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vZXh0ZXJuYWwgXCJhcG9sbG8tbGluay13c1wiP2Q5Y2EiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEiLCJmaWxlIjoiYXBvbGxvLWxpbmstd3MuanMiLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCJhcG9sbG8tbGluay13c1wiKTsiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///apollo-link-ws\n");

/***/ }),

/***/ "graphql-tag":
/*!******************************!*\
  !*** external "graphql-tag" ***!
  \******************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("module.exports = require(\"graphql-tag\");//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vZXh0ZXJuYWwgXCJncmFwaHFsLXRhZ1wiP2Y4YjciXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEiLCJmaWxlIjoiZ3JhcGhxbC10YWcuanMiLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCJncmFwaHFsLXRhZ1wiKTsiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///graphql-tag\n");

/***/ }),

/***/ "mobx":
/*!***********************!*\
  !*** external "mobx" ***!
  \***********************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("module.exports = require(\"mobx\");//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vZXh0ZXJuYWwgXCJtb2J4XCI/ODE0ZSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSIsImZpbGUiOiJtb2J4LmpzIiwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwibW9ieFwiKTsiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///mobx\n");

/***/ }),

/***/ "mobx-react":
/*!*****************************!*\
  !*** external "mobx-react" ***!
  \*****************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("module.exports = require(\"mobx-react\");//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vZXh0ZXJuYWwgXCJtb2J4LXJlYWN0XCI/NWJjYSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSIsImZpbGUiOiJtb2J4LXJlYWN0LmpzIiwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwibW9ieC1yZWFjdFwiKTsiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///mobx-react\n");

/***/ }),

/***/ "node-fetch":
/*!*****************************!*\
  !*** external "node-fetch" ***!
  \*****************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("module.exports = require(\"node-fetch\");//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vZXh0ZXJuYWwgXCJub2RlLWZldGNoXCI/NWNkNSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSIsImZpbGUiOiJub2RlLWZldGNoLmpzIiwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwibm9kZS1mZXRjaFwiKTsiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///node-fetch\n");

/***/ }),

/***/ "react":
/*!************************!*\
  !*** external "react" ***!
  \************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("module.exports = require(\"react\");//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vZXh0ZXJuYWwgXCJyZWFjdFwiPzU4OGUiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEiLCJmaWxlIjoicmVhY3QuanMiLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCJyZWFjdFwiKTsiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///react\n");

/***/ }),

/***/ "react-native-web/dist/cjs/exports/Platform":
/*!*************************************************************!*\
  !*** external "react-native-web/dist/cjs/exports/Platform" ***!
  \*************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("module.exports = require(\"react-native-web/dist/cjs/exports/Platform\");//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vZXh0ZXJuYWwgXCJyZWFjdC1uYXRpdmUtd2ViL2Rpc3QvY2pzL2V4cG9ydHMvUGxhdGZvcm1cIj80MjZjIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBIiwiZmlsZSI6InJlYWN0LW5hdGl2ZS13ZWIvZGlzdC9janMvZXhwb3J0cy9QbGF0Zm9ybS5qcyIsInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcInJlYWN0LW5hdGl2ZS13ZWIvZGlzdC9janMvZXhwb3J0cy9QbGF0Zm9ybVwiKTsiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///react-native-web/dist/cjs/exports/Platform\n");

/***/ }),

/***/ "subscriptions-transport-ws":
/*!*********************************************!*\
  !*** external "subscriptions-transport-ws" ***!
  \*********************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("module.exports = require(\"subscriptions-transport-ws\");//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vZXh0ZXJuYWwgXCJzdWJzY3JpcHRpb25zLXRyYW5zcG9ydC13c1wiPzFjNWMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEiLCJmaWxlIjoic3Vic2NyaXB0aW9ucy10cmFuc3BvcnQtd3MuanMiLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCJzdWJzY3JpcHRpb25zLXRyYW5zcG9ydC13c1wiKTsiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///subscriptions-transport-ws\n");

/***/ }),

/***/ "ws":
/*!*********************!*\
  !*** external "ws" ***!
  \*********************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("module.exports = require(\"ws\");//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vZXh0ZXJuYWwgXCJ3c1wiPzE1YTUiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEiLCJmaWxlIjoid3MuanMiLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCJ3c1wiKTsiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///ws\n");

/***/ })

/******/ });