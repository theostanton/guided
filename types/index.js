"use strict";
var __makeTemplateObject = (this && this.__makeTemplateObject) || function (cooked, raw) {
    if (Object.defineProperty) { Object.defineProperty(cooked, "raw", { value: raw }); } else { cooked.raw = raw; }
    return cooked;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
/* DO NOT EDIT! This file is auto-generated by graphql-code-generator - see `codegen.yml` */
var graphql_tag_1 = __importDefault(require("graphql-tag"));
var ApolloReactHooks = __importStar(require("@apollo/react-hooks"));
var GuidesOrderBy;
(function (GuidesOrderBy) {
    GuidesOrderBy["Natural"] = "NATURAL";
    GuidesOrderBy["IdAsc"] = "ID_ASC";
    GuidesOrderBy["IdDesc"] = "ID_DESC";
    GuidesOrderBy["TitleAsc"] = "TITLE_ASC";
    GuidesOrderBy["TitleDesc"] = "TITLE_DESC";
    GuidesOrderBy["SlugAsc"] = "SLUG_ASC";
    GuidesOrderBy["SlugDesc"] = "SLUG_DESC";
    GuidesOrderBy["OwnerAsc"] = "OWNER_ASC";
    GuidesOrderBy["OwnerDesc"] = "OWNER_DESC";
    GuidesOrderBy["PrimaryKeyAsc"] = "PRIMARY_KEY_ASC";
    GuidesOrderBy["PrimaryKeyDesc"] = "PRIMARY_KEY_DESC";
})(GuidesOrderBy = exports.GuidesOrderBy || (exports.GuidesOrderBy = {}));
var RidesOrderBy;
(function (RidesOrderBy) {
    RidesOrderBy["Natural"] = "NATURAL";
    RidesOrderBy["IdAsc"] = "ID_ASC";
    RidesOrderBy["IdDesc"] = "ID_DESC";
    RidesOrderBy["GuideAsc"] = "GUIDE_ASC";
    RidesOrderBy["GuideDesc"] = "GUIDE_DESC";
    RidesOrderBy["FromSpotAsc"] = "FROM_SPOT_ASC";
    RidesOrderBy["FromSpotDesc"] = "FROM_SPOT_DESC";
    RidesOrderBy["ToSpotAsc"] = "TO_SPOT_ASC";
    RidesOrderBy["ToSpotDesc"] = "TO_SPOT_DESC";
    RidesOrderBy["PrimaryKeyAsc"] = "PRIMARY_KEY_ASC";
    RidesOrderBy["PrimaryKeyDesc"] = "PRIMARY_KEY_DESC";
})(RidesOrderBy = exports.RidesOrderBy || (exports.RidesOrderBy = {}));
var SpotsOrderBy;
(function (SpotsOrderBy) {
    SpotsOrderBy["Natural"] = "NATURAL";
    SpotsOrderBy["IdAsc"] = "ID_ASC";
    SpotsOrderBy["IdDesc"] = "ID_DESC";
    SpotsOrderBy["LabelAsc"] = "LABEL_ASC";
    SpotsOrderBy["LabelDesc"] = "LABEL_DESC";
    SpotsOrderBy["GuideAsc"] = "GUIDE_ASC";
    SpotsOrderBy["GuideDesc"] = "GUIDE_DESC";
    SpotsOrderBy["NightsAsc"] = "NIGHTS_ASC";
    SpotsOrderBy["NightsDesc"] = "NIGHTS_DESC";
    SpotsOrderBy["LockedAsc"] = "LOCKED_ASC";
    SpotsOrderBy["LockedDesc"] = "LOCKED_DESC";
    SpotsOrderBy["PrimaryKeyAsc"] = "PRIMARY_KEY_ASC";
    SpotsOrderBy["PrimaryKeyDesc"] = "PRIMARY_KEY_DESC";
})(SpotsOrderBy = exports.SpotsOrderBy || (exports.SpotsOrderBy = {}));
var UsersOrderBy;
(function (UsersOrderBy) {
    UsersOrderBy["Natural"] = "NATURAL";
    UsersOrderBy["UsernameAsc"] = "USERNAME_ASC";
    UsersOrderBy["UsernameDesc"] = "USERNAME_DESC";
    UsersOrderBy["EmailAsc"] = "EMAIL_ASC";
    UsersOrderBy["EmailDesc"] = "EMAIL_DESC";
    UsersOrderBy["PasswordAsc"] = "PASSWORD_ASC";
    UsersOrderBy["PasswordDesc"] = "PASSWORD_DESC";
    UsersOrderBy["PrimaryKeyAsc"] = "PRIMARY_KEY_ASC";
    UsersOrderBy["PrimaryKeyDesc"] = "PRIMARY_KEY_DESC";
})(UsersOrderBy = exports.UsersOrderBy || (exports.UsersOrderBy = {}));
exports.SomeQueryDocument = graphql_tag_1.default(templateObject_1 || (templateObject_1 = __makeTemplateObject(["\n    query SomeQuery {\n  allUsers {\n    totalCount\n    nodes {\n      email\n      username\n      guidesByOwner {\n        nodes {\n          owner\n          title\n        }\n      }\n    }\n  }\n}\n    "], ["\n    query SomeQuery {\n  allUsers {\n    totalCount\n    nodes {\n      email\n      username\n      guidesByOwner {\n        nodes {\n          owner\n          title\n        }\n      }\n    }\n  }\n}\n    "])));
/**
 * __useSomeQueryQuery__
 *
 * To run a query within a React component, call `useSomeQueryQuery` and pass it any options that fit your needs.
 * When your component renders, `useSomeQueryQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useSomeQueryQuery({
 *   variables: {
 *   },
 * });
 */
function useSomeQueryQuery(baseOptions) {
    return ApolloReactHooks.useQuery(exports.SomeQueryDocument, baseOptions);
}
exports.useSomeQueryQuery = useSomeQueryQuery;
function useSomeQueryLazyQuery(baseOptions) {
    return ApolloReactHooks.useLazyQuery(exports.SomeQueryDocument, baseOptions);
}
exports.useSomeQueryLazyQuery = useSomeQueryLazyQuery;
var templateObject_1;
