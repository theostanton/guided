version: "3"

services:


#  sample:
#    image: amazon/amazon-ecs-sample
#    ports:
#      - "80:80"
#    logging:
#      driver: awslogs
#      options:
#        awslogs-group: guided
#        awslogs-region: eu-west-2
#        awslogs-stream-prefix: sample

#  database:
#    image: "postgres:11"
#    environment:
#      - POSTGRES_USER=user
#      - POSTGRES_PASSWORD=password
#      - POSTGRES_DB=database
#    ports:
#      - "5432:5432"
#    volumes:
#      - ./backend/data:/var/lib/postgresql/data

#  redis:
#    image: redis
#    ports:
#      - "6379"

#    volumes:
#      - ./backend/data/redis:/data
#    logging:
#      driver: awslogs
#      options:
#        awslogs-group: guided
#        awslogs-region: eu-west-2
#        awslogs-stream-prefix: redis
#
#  arena:
#    image: mixmaxhq/arena
#    ports:
#      - "4567:4567"
#    volumes:
#      - ./backend/data/arena.json:/opt/arena/src/api/config/index.json


  api:
    image: 132788847502.dkr.ecr.eu-west-2.amazonaws.com/guided/api
    ports:
      - "4000:4000"
    logging:
      driver: awslogs
      options:
        awslogs-group: guided
        awslogs-region: eu-west-2
        awslogs-stream-prefix: api
#
#  website-example:
#    container_name: "website-example"
#    build:
#      context: frontend/website-example
#      dockerfile: Dockerfile
#    working_dir: /app
#    command: './entrypoint.sh'
#    ports:
#      - "8000:8000"
#    volumes:
#      - ./frontend/website-example:/app
#      - /app/node_modules/
#
#  usersite:
#    container_name: "usersite"
#    build:
#      context: frontend/usersite
#      dockerfile: Dockerfile
#    working_dir: /app
#    command: './entrypoint.sh'
#    ports:
#      - "9000:9000"
#    volumes:
#      - ./frontend/usersite:/app
#      - /app/node_modules/

